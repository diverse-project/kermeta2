package org::kermeta::language::structure;

using kermeta::standard
using kermeta::utils
using kermeta::io::StdIO => stdio
class VisualiserKermetaModel {
	attribute radius : Integer

	attribute considersuperType : Boolean

	attribute considerownedAttribute : Boolean

	attribute considertype : Boolean
	
	attribute compositionOnly : Boolean
	
	attribute card1Only : Boolean

	attribute idPass : Integer

	reference requiredClassDefinitions : ClassDefinition[0..*]

	reference requiredModelingUnits : ModelingUnit[0..*]

	reference addedPackages : Bag<Package>

	reference addedClassDefinitions : Bag<ClassDefinition>
	
	reference addedsuperClasses : Bag<ClasssuperClasses>
	
	reference addedProperties : Bag<Property>

	operation initialise(requiredClassDefinitions : bag ClassDefinition[0..*], 
		requiredModelingUnits : bag ModelingUnit[0..*], radius : Integer, 
		considersuperType : Boolean, considerownedAttribute : Boolean, 
		considertype : Boolean, compositionOnly : Boolean, card1Only : Boolean) : VisualiserKermetaModel is do
		result := self
		self.addedPackages := Bag<Package>.new
		self.addedClassDefinitions := Bag<ClassDefinition>.new
		self.addedProperties := Bag<Property>.new
		self.addedsuperClasses := Bag<ClasssuperClasses>.new
		self.radius := radius
		self.requiredClassDefinitions.clear()
		self.requiredClassDefinitions.addAll(requiredClassDefinitions)
		self.requiredModelingUnits.clear()
		self.requiredModelingUnits.addAll(requiredModelingUnits)
		self.considersuperType := considersuperType
		self.considerownedAttribute := considerownedAttribute
		self.considertype := considertype
		self.compositionOnly := compositionOnly
		self.card1Only := card1Only

		if(idPass.isVoid) then idPass := 0
		else idPass := idPass + 1 end
	end

	operation launch() is do
		onStart()
		self.requiredClassDefinitions.each{theClassDefinition | theClassDefinition.visitToAddClasses(self, 0) }
		self.requiredModelingUnits.each{theModelingUnit | theModelingUnit.visitToAddClasses(self, 0) }
		self.requiredClassDefinitions.each{theClassDefinition | theClassDefinition.visitToAddRelations(self, 0) }
		self.requiredModelingUnits.each{theModelingUnit | theModelingUnit.visitToAddRelations(self, 0) }
		self.addedPackages.each{thePackage | if(thePackage.checkCanReallyBeAdded()) then onPackageAdded(thePackage) end }
		self.addedClassDefinitions.each{theClassDefinition | onClassDefinitionAdded(theClassDefinition) }
		self.addedProperties.each{theProperty | onPropertyAdded(theProperty) }
		self.addedsuperClasses.each{thesuperClasses | self.onClazzsuperClassesAdded(thesuperClasses.src, thesuperClasses.tar) }
		onEnd()
	end

	operation onPackageAdded(pkg : Package) is do
	end
	operation onClassDefinitionAdded(cl : ClassDefinition) is do
	end
	operation onPropertyAdded(prop : Property) is do
	end
	operation onClazzsuperClassesAdded(srcClass : TypeDefinition, tgtClass : TypeDefinition) is do 
	end
	operation onEnd() is do
	end
	operation onStart() is do
	end
}

class ClasssuperClasses {
	reference src : TypeDefinition
	reference tar : TypeDefinition
	operation initialise(src : TypeDefinition, tar : TypeDefinition) : ClasssuperClasses is do
		result := self
		self.src := src
		self.tar := tar
	end
}

