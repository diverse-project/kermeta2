package ex::classModel;
using kermeta::standard::*
using kermeta::utils::*
using kermeta::io::StdIO => stdio
class SlicerVisitor {
	attribute visitedPass : Boolean

	attribute visitedForRelations : Boolean

	attribute sliced : Boolean

	attribute idPass : Integer

	operation initialiseAttributes(pass : Integer) is do
		self.visitedPass := false
		self.sliced := false
		self.visitedForRelations := false
		self.idPass := pass
	end

	operation visitToAddClasses(thesuperTypesSlicer : superTypesSlicer) is do
		self.visitedPass := true
	end

	operation visitToAddRelations(thesuperTypesSlicer : superTypesSlicer) is do
	end

	operation checkInitialisation(pass : Integer) is do
		if(self.visitedPass.isVoid or self.idPass.isVoid.orElse{b | self.idPass!=pass}) then initialiseAttributes(pass) end
	end
	operation checkCanReallyBeAdded() : Boolean is do
		self.visitedPass := true
		result := true
	end
}

aspect class Clazz inherits SlicerVisitor {
	method visitToAddClasses(thesuperTypesSlicer : superTypesSlicer) is do
		checkInitialisation(thesuperTypesSlicer.idPass)
		if(not self.visitedPass) then
			super[SlicerVisitor](thesuperTypesSlicer)
			if(not self.sliced) then
				thesuperTypesSlicer.addedClazzs.add(self)
				self.sliced := true
			end
			self.visitedPass := true
			self.superClasses.each{theClazz | theClazz.visitToAddClasses(thesuperTypesSlicer)}
		end
	end
	method visitToAddRelations(thesuperTypesSlicer : superTypesSlicer) is do
		if(not self.visitedForRelations) then
			super[SlicerVisitor](thesuperTypesSlicer)
			self.visitedForRelations := true
			self.superClasses.each{theClazz | theClazz.visitToAddRelations(thesuperTypesSlicer)
				if(self.visitedForRelations and theClazz.visitedForRelations) then
					thesuperTypesSlicer.addedsuperClasses.add(ClasssuperClasses.new.initialise(self, theClazz)) end }
		end
	end
}

