using kermeta::standard::*
using kermeta::io::StdIO => stdio

using kermeta::emfpersistence::*

using logo_interpreter::Context
using kmLogo::ASM::LogoProgram

package org::kermeta::language::sample::logo::interpreter {
	class MainClass {
	
		attribute context 	: Context
		reference root 		: LogoProgram
	
		@main "" // declares that operation as a possible entry point of the program
		operation mainOperation() : Void is do
			
			context := Context.new
			context.initialize
			// load the program
			stdio.writeln("Loading logoasm file")
			root := loadProgram("platform:/resource/org.kermeta.language.sample.logo.interpreter/test/test.logoasm")
			stdio.writeln("Logoasm file loaded")
			// Run interpretation
			stdio.writeln("Interpretation running")
			root.eval(context)
			stdio.writeln("Ended Interpretation")
									
		end
		
		operation loadProgram(logoFile : String) : LogoProgram is do             
			var repository : ResourceSet init ResourceSet.new
			var resource : Resource init repository.createResource(logoFile, "platform:/resource/org.kermeta.kmlogo.logoasm.model/model/ASMLogo.ecore")
			resource.load(void)      
			result ?= resource.getContents().one
		end
	}
}