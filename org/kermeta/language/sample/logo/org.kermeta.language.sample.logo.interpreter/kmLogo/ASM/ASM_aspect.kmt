using kermeta::standard::*
using kermeta::utils::*
using kermeta::io::StdIO => stdio

using org::kermeta::language::sample::logo::interpreter::Context

package kmLogo {

	package ASM {

		aspect abstract class Instruction {

			operation eval (context : Context) : Integer is do
				result := 0
			end

		}

		aspect abstract class Primitive {

			operation eval (context : Context) : Integer is do
				result := void
			end

		}

		aspect class Back {

			operation eval (context : Context) : Integer is do
				context.turtle.forward(-steps.eval(context))
				result := void
			end

		}

		aspect class Forward {

			operation eval (context : Context) : Integer is do
				context.turtle.forward(steps.eval(context))
				result := void
			end

		}

		aspect class Left {

			operation eval (context : Context) : Integer is do
				context.turtle.rotate(-angle.eval(context))
				result := void
			end

		}

		aspect class Right {

			operation eval (context : Context) : Integer is do
				context.turtle.rotate(angle.eval(context))
				result := void
			end

		}

		aspect class PenDown {

			operation eval (context : Context) : Integer is do
				context.turtle.penUp := false
				result := void
			end

		}

		aspect class PenUp {

			operation eval (context : Context) : Integer is do
				context.turtle.penUp := true
				result := void
			end

		}

		aspect class Clear {

			operation eval (context : Context) : Integer is do
				context.turtle.reset
				result := void
			end

		}

		aspect abstract class Expression {

			operation eval (context : Context) : Integer is do
				result := void
			end

		}

		aspect class Constant {

			operation eval (context : Context) : Integer is do
				result := integerValue
			end

		}

		aspect class ProcCall {

			operation eval (context : Context) : Integer is do
				result := void
				stdio.writeln("Calling of : " + self.declaration.name)
				var params : Hashtable<String,Integer> := Hashtable<String,Integer>.new
				
				from var i : Integer := 0
				until i == actualArgs.size
				loop
					var currentArg : Integer := actualArgs.elementAt(i).eval(context)
					params.put(declaration.args.elementAt(i).name,currentArg)
					i := i + 1
				end
				
				context.push(params)
				
				declaration.instructions.each{instruction | result := instruction.eval(context)}
				
				context.pop
			end

		}

		aspect class Block {

			operation eval (context : Context) : Integer is do
				result := void
				instructions.each{instruction | result := instruction.eval(context)}
			end
			
		}

		aspect class If {

			operation eval (context : Context) : Integer is do
				if (condition.eval(context) != 0) then
					result := thenPart.eval(context)
				else
					result := elsePart.eval(context)
				end
				result := void
			end

		}

		aspect class Repeat {

			operation eval (context : Context) : Integer is do
				from var i : Integer init condition.eval(context)
				until i < 1 loop
					block.eval(context)
					i := i - 1 
				end
				result := void
			end

		}

		aspect class While {

			operation eval (context : Context) : Integer is do
				result := void
				from var i : Integer init condition.eval(context)
				until i == 0
				loop
					result := block.eval(context)
					i := i - 1
				end
			end

		}

		aspect class Parameter {

			operation eval (context : Context) : Integer is do
				result := context.peek.getValue(self.name)
			end

		}

		aspect class ParameterCall {

			operation eval (context : Context) : Integer is do
				result := parameter.eval(context)
			end

		}

		aspect class Plus {

			operation eval (context : Context) : Integer is do
				result := lhs.eval(context) + rhs.eval(context)
			end

		}

		aspect class Minus {

			operation eval (context : Context) : Integer is do
				result := lhs.eval(context) - rhs.eval(context)
			end

		}

		aspect class Mult {

			operation eval (context : Context) : Integer is do
				result := lhs.eval(context) * rhs.eval(context)
			end

		}

		aspect class Div {

			operation eval (context : Context) : Integer is do
				if(rhs.eval(context) != 0) then
					result := lhs.eval(context) / rhs.eval(context)
				else
					result := 0
				end
			end

		}

		aspect class Equals {

			operation eval (context : Context) : Integer is do
				if(lhs.eval(context) == rhs.eval(context)) then
					result := 0
				else
					result := 1
				end
			end

		}

		aspect class Greater {

			operation eval (context : Context) : Integer is do
				if(lhs.eval(context) > rhs.eval(context)) then
					result := 0
				else
					result := 1
				end
			end

		}

		aspect class Lower {

			operation eval (context : Context) : Integer is do
				if(lhs.eval(context) < rhs.eval(context)) then
					result := 0
				else
					result := 1
				end
			end

		}

		aspect class LogoProgram {

			operation eval (context : Context) : Integer is do
				instructions.each{instruction  | result := instruction.eval(context)}
				result := void
			end

		}

	}
}
