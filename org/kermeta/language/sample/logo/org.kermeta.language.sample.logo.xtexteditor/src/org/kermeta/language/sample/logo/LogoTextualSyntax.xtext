// automatically generated by Xtext
grammar org.kermeta.language.sample.logo.LogoTextualSyntax with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.kermeta.language.sample.logo.model/model/ASMLogo.ecore"
//import "http://www.kermeta.org/logoASM" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LogoProgram returns LogoProgram:
	{LogoProgram}
	'LogoProgram'
	'{'
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';

Instruction returns Instruction:
	Back | Forward | Left | Right | PenDown | PenUp | Clear | Constant | ProcCall | ProcDeclaration | Block | If | ControlStructure_Impl | Repeat | While | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;

Expression returns Expression:
	Constant | ProcCall | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;





Back returns Back:
	'Back'
	'{'
		'steps' steps=Expression
	'}';

Forward returns Forward:
	'Forward'
	'{'
		'steps' steps=Expression
	'}';

Left returns Left:
	{Left}
	'Left'
	'{'
		('angle' angle=Expression)?
	'}';

Right returns Right:
	{Right}
	'Right'
	'{'
		('angle' angle=Expression)?
	'}';

PenDown returns PenDown:
	{PenDown}
	'PenDown'
	;

PenUp returns PenUp:
	{PenUp}
	'PenUp'
	;

Clear returns Clear:
	{Clear}
	'Clear'
	;

Constant returns Constant:
	{Constant}
	'Constant'
	'{'
		('integerValue' integerValue=EInt)?
	'}';

ProcCall returns ProcCall:
	'ProcCall'
	'{'
		'declaration' declaration=[ProcDeclaration|EString]
		('actualArgs' '{' actualArgs+=Expression ( "," actualArgs+=Expression)* '}' )?
	'}';

ProcDeclaration returns ProcDeclaration:
	{ProcDeclaration}
	'ProcDeclaration'
	name=EString
	'{'
		('procCall' '(' procCall+=[ProcCall|EString] ( "," procCall+=[ProcCall|EString])* ')' )?
		('args' '{' args+=Parameter ( "," args+=Parameter)* '}' )?
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';

Block returns Block:
	{Block}
	'Block'
	'{'
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';

If returns If:
	'If'
	'{'
		('condition' condition=Expression)?
		'thenPart' thenPart=Block
		('elsePart' elsePart=Block)?
	'}';

ControlStructure_Impl returns ControlStructure:
	{ControlStructure}
	'ControlStructure'
	'{'
		('condition' condition=Expression)?
	'}';

Repeat returns Repeat:
	'Repeat'
	'{'
		('condition' condition=Expression)?
		'block' block=Block
	'}';

While returns While:
	'While'
	'{'
		('condition' condition=Expression)?
		'block' block=Block
	'}';

ParameterCall returns ParameterCall:
	'ParameterCall'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';

Plus returns Plus:
	'Plus'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Minus returns Minus:
	'Minus'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Mult returns Mult:
	'Mult'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Div returns Div:
	'Div'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Equals returns Equals:
	'Equals'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Greater returns Greater:
	'Greater'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

Lower returns Lower:
	'Lower'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString;
