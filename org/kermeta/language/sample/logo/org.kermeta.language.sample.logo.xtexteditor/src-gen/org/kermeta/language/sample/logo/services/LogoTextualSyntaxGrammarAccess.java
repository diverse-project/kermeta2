/*
* generated by Xtext
*/

package org.kermeta.language.sample.logo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LogoTextualSyntaxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LogoProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogoProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogoProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		
		//LogoProgram:
		//
		//	{LogoProgram} instructions+=Instruction instructions+=Instruction*;
		public ParserRule getRule() { return rule; }

		//{LogoProgram} instructions+=Instruction instructions+=Instruction*
		public Group getGroup() { return cGroup; }

		//{LogoProgram}
		public Action getLogoProgramAction_0() { return cLogoProgramAction_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_0() { return cInstructionsInstructionParserRuleCall_2_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPenDownParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPenUpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClearParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProcCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cProcDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBlockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIfParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRepeatParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWhileParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Instruction:
		//
		//	Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ProcDeclaration | Block | If | Repeat | While;
		public ParserRule getRule() { return rule; }

		//Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ProcDeclaration | Block | If | Repeat | While
		public Alternatives getAlternatives() { return cAlternatives; }

		//Back
		public RuleCall getBackParserRuleCall_0() { return cBackParserRuleCall_0; }

		//Forward
		public RuleCall getForwardParserRuleCall_1() { return cForwardParserRuleCall_1; }

		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }

		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }

		//PenDown
		public RuleCall getPenDownParserRuleCall_4() { return cPenDownParserRuleCall_4; }

		//PenUp
		public RuleCall getPenUpParserRuleCall_5() { return cPenUpParserRuleCall_5; }

		//Clear
		public RuleCall getClearParserRuleCall_6() { return cClearParserRuleCall_6; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_7() { return cProcCallParserRuleCall_7; }

		//ProcDeclaration
		public RuleCall getProcDeclarationParserRuleCall_8() { return cProcDeclarationParserRuleCall_8; }

		//Block
		public RuleCall getBlockParserRuleCall_9() { return cBlockParserRuleCall_9; }

		//If
		public RuleCall getIfParserRuleCall_10() { return cIfParserRuleCall_10; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_11() { return cRepeatParserRuleCall_11; }

		//While
		public RuleCall getWhileParserRuleCall_12() { return cWhileParserRuleCall_12; }
	}

	public class BInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPenDownParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPenUpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClearParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProcCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cParameterCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRepeatParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cWhileParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//BInstruction returns Instruction:
		//
		//	Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ParameterCall | If | Repeat | While;
		public ParserRule getRule() { return rule; }

		//Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ParameterCall | If | Repeat | While
		public Alternatives getAlternatives() { return cAlternatives; }

		//Back
		public RuleCall getBackParserRuleCall_0() { return cBackParserRuleCall_0; }

		//Forward
		public RuleCall getForwardParserRuleCall_1() { return cForwardParserRuleCall_1; }

		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }

		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }

		//PenDown
		public RuleCall getPenDownParserRuleCall_4() { return cPenDownParserRuleCall_4; }

		//PenUp
		public RuleCall getPenUpParserRuleCall_5() { return cPenUpParserRuleCall_5; }

		//Clear
		public RuleCall getClearParserRuleCall_6() { return cClearParserRuleCall_6; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_7() { return cProcCallParserRuleCall_7; }

		//ParameterCall
		public RuleCall getParameterCallParserRuleCall_8() { return cParameterCallParserRuleCall_8; }

		//If
		public RuleCall getIfParserRuleCall_9() { return cIfParserRuleCall_9; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_10() { return cRepeatParserRuleCall_10; }

		//While
		public RuleCall getWhileParserRuleCall_11() { return cWhileParserRuleCall_11; }
	}

	public class BackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Back");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsLiteralsExpressionParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		////Expression returns Expression:
		//
		////	Constant | ProcCall | ParameterCall | EqualExpression;
		//
		//Back:
		//
		//	"back" steps=LiteralsExpression;
		public ParserRule getRule() { return rule; }

		//"back" steps=LiteralsExpression
		public Group getGroup() { return cGroup; }

		//"back"
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }

		//steps=LiteralsExpression
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//LiteralsExpression
		public RuleCall getStepsLiteralsExpressionParserRuleCall_1_0() { return cStepsLiteralsExpressionParserRuleCall_1_0; }
	}

	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsLiteralsExpressionParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//Forward:
		//
		//	"forward" steps=LiteralsExpression;
		public ParserRule getRule() { return rule; }

		//"forward" steps=LiteralsExpression
		public Group getGroup() { return cGroup; }

		//"forward"
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }

		//steps=LiteralsExpression
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//LiteralsExpression
		public RuleCall getStepsLiteralsExpressionParserRuleCall_1_0() { return cStepsLiteralsExpressionParserRuleCall_1_0; }
	}

	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleLiteralsExpressionParserRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		
		//Left:
		//
		//	{Left} "left" angle=LiteralsExpression;
		public ParserRule getRule() { return rule; }

		//{Left} "left" angle=LiteralsExpression
		public Group getGroup() { return cGroup; }

		//{Left}
		public Action getLeftAction_0() { return cLeftAction_0; }

		//"left"
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }

		//angle=LiteralsExpression
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }

		//LiteralsExpression
		public RuleCall getAngleLiteralsExpressionParserRuleCall_2_0() { return cAngleLiteralsExpressionParserRuleCall_2_0; }
	}

	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleLiteralsExpressionParserRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		
		//Right:
		//
		//	{Right} "right" angle=LiteralsExpression;
		public ParserRule getRule() { return rule; }

		//{Right} "right" angle=LiteralsExpression
		public Group getGroup() { return cGroup; }

		//{Right}
		public Action getRightAction_0() { return cRightAction_0; }

		//"right"
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }

		//angle=LiteralsExpression
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }

		//LiteralsExpression
		public RuleCall getAngleLiteralsExpressionParserRuleCall_2_0() { return cAngleLiteralsExpressionParserRuleCall_2_0; }
	}

	public class PenDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PenDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenDownAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPendownKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenDown:
		//
		//	{PenDown} "pendown";
		public ParserRule getRule() { return rule; }

		//{PenDown} "pendown"
		public Group getGroup() { return cGroup; }

		//{PenDown}
		public Action getPenDownAction_0() { return cPenDownAction_0; }

		//"pendown"
		public Keyword getPendownKeyword_1() { return cPendownKeyword_1; }
	}

	public class PenUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PenUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenUpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPenupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenUp:
		//
		//	{PenUp} "penup";
		public ParserRule getRule() { return rule; }

		//{PenUp} "penup"
		public Group getGroup() { return cGroup; }

		//{PenUp}
		public Action getPenUpAction_0() { return cPenUpAction_0; }

		//"penup"
		public Keyword getPenupKeyword_1() { return cPenupKeyword_1; }
	}

	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Clear:
		//
		//	{Clear} "clear";
		public ParserRule getRule() { return rule; }

		//{Clear} "clear"
		public Group getGroup() { return cGroup; }

		//{Clear}
		public Action getClearAction_0() { return cClearAction_0; }

		//"clear"
		public Keyword getClearKeyword_1() { return cClearKeyword_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIntegerValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntegerValueEIntParserRuleCall_1_0 = (RuleCall)cIntegerValueAssignment_1.eContents().get(0);
		
		//Constant:
		//
		//	{Constant} integerValue=EInt;
		public ParserRule getRule() { return rule; }

		//{Constant} integerValue=EInt
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//integerValue=EInt
		public Assignment getIntegerValueAssignment_1() { return cIntegerValueAssignment_1; }

		//EInt
		public RuleCall getIntegerValueEIntParserRuleCall_1_0() { return cIntegerValueEIntParserRuleCall_1_0; }
	}

	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeclarationProcDeclarationCrossReference_0_0 = (CrossReference)cDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cDeclarationProcDeclarationEStringParserRuleCall_0_0_1 = (RuleCall)cDeclarationProcDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualArgsLiteralsExpressionParserRuleCall_2_0 = (RuleCall)cActualArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActualArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActualArgsLiteralsExpressionParserRuleCall_3_1_0 = (RuleCall)cActualArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcCall:
		//
		//	declaration=[ProcDeclaration|EString] "(" actualArgs+=LiteralsExpression? ("," actualArgs+=LiteralsExpression)* ")";
		public ParserRule getRule() { return rule; }

		//declaration=[ProcDeclaration|EString] "(" actualArgs+=LiteralsExpression? ("," actualArgs+=LiteralsExpression)* ")"
		public Group getGroup() { return cGroup; }

		//declaration=[ProcDeclaration|EString]
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//[ProcDeclaration|EString]
		public CrossReference getDeclarationProcDeclarationCrossReference_0_0() { return cDeclarationProcDeclarationCrossReference_0_0; }

		//EString
		public RuleCall getDeclarationProcDeclarationEStringParserRuleCall_0_0_1() { return cDeclarationProcDeclarationEStringParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//actualArgs+=LiteralsExpression?
		public Assignment getActualArgsAssignment_2() { return cActualArgsAssignment_2; }

		//LiteralsExpression
		public RuleCall getActualArgsLiteralsExpressionParserRuleCall_2_0() { return cActualArgsLiteralsExpressionParserRuleCall_2_0; }

		//("," actualArgs+=LiteralsExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//actualArgs+=LiteralsExpression
		public Assignment getActualArgsAssignment_3_1() { return cActualArgsAssignment_3_1; }

		//LiteralsExpression
		public RuleCall getActualArgsLiteralsExpressionParserRuleCall_3_1_0() { return cActualArgsLiteralsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ProcDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsParameterParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		private final Assignment cInstructionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstructionsInstructionParserRuleCall_5_0 = (RuleCall)cInstructionsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcDeclaration:
		//
		//	{ProcDeclaration} "to" name=EString args+=Parameter* instructions+=Instruction instructions+=Instruction* "end";
		public ParserRule getRule() { return rule; }

		//{ProcDeclaration} "to" name=EString args+=Parameter* instructions+=Instruction instructions+=Instruction* "end"
		public Group getGroup() { return cGroup; }

		//{ProcDeclaration}
		public Action getProcDeclarationAction_0() { return cProcDeclarationAction_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//args+=Parameter*
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_3_0() { return cArgsParameterParserRuleCall_3_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_5() { return cInstructionsAssignment_5; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_5_0() { return cInstructionsInstructionParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionsBInstructionParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//
		//	{Block} "[" instructions+=BInstruction* "]";
		public ParserRule getRule() { return rule; }

		//{Block} "[" instructions+=BInstruction* "]"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//instructions+=BInstruction*
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }

		//BInstruction
		public RuleCall getInstructionsBInstructionParserRuleCall_2_0() { return cInstructionsBInstructionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfelseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConditionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionLiteralsExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionAssignment_0_1.eContents().get(0);
		private final Assignment cThenPartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cThenPartBlockParserRuleCall_0_2_0 = (RuleCall)cThenPartAssignment_0_2.eContents().get(0);
		private final Assignment cElsePartAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElsePartBlockParserRuleCall_0_3_0 = (RuleCall)cElsePartAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionLiteralsExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Assignment cThenPartAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenPartBlockParserRuleCall_1_2_0 = (RuleCall)cThenPartAssignment_1_2.eContents().get(0);
		
		//If:
		//
		//	"ifelse" condition=LiteralsExpression thenPart=Block elsePart=Block | "if" condition=LiteralsExpression
		//
		//	thenPart=Block;
		public ParserRule getRule() { return rule; }

		//"ifelse" condition=LiteralsExpression thenPart=Block elsePart=Block | "if" condition=LiteralsExpression thenPart=Block
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ifelse" condition=LiteralsExpression thenPart=Block elsePart=Block
		public Group getGroup_0() { return cGroup_0; }

		//"ifelse"
		public Keyword getIfelseKeyword_0_0() { return cIfelseKeyword_0_0; }

		//condition=LiteralsExpression
		public Assignment getConditionAssignment_0_1() { return cConditionAssignment_0_1; }

		//LiteralsExpression
		public RuleCall getConditionLiteralsExpressionParserRuleCall_0_1_0() { return cConditionLiteralsExpressionParserRuleCall_0_1_0; }

		//thenPart=Block
		public Assignment getThenPartAssignment_0_2() { return cThenPartAssignment_0_2; }

		//Block
		public RuleCall getThenPartBlockParserRuleCall_0_2_0() { return cThenPartBlockParserRuleCall_0_2_0; }

		//elsePart=Block
		public Assignment getElsePartAssignment_0_3() { return cElsePartAssignment_0_3; }

		//Block
		public RuleCall getElsePartBlockParserRuleCall_0_3_0() { return cElsePartBlockParserRuleCall_0_3_0; }

		//"if" condition=LiteralsExpression thenPart=Block
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//condition=LiteralsExpression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//LiteralsExpression
		public RuleCall getConditionLiteralsExpressionParserRuleCall_1_1_0() { return cConditionLiteralsExpressionParserRuleCall_1_1_0; }

		//thenPart=Block
		public Assignment getThenPartAssignment_1_2() { return cThenPartAssignment_1_2; }

		//Block
		public RuleCall getThenPartBlockParserRuleCall_1_2_0() { return cThenPartBlockParserRuleCall_1_2_0; }
	}

	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionLiteralsExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//Repeat:
		//
		//	"repeat" condition=LiteralsExpression block=Block;
		public ParserRule getRule() { return rule; }

		//"repeat" condition=LiteralsExpression block=Block
		public Group getGroup() { return cGroup; }

		//"repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }

		//condition=LiteralsExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//LiteralsExpression
		public RuleCall getConditionLiteralsExpressionParserRuleCall_1_0() { return cConditionLiteralsExpressionParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionLiteralsExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//While:
		//
		//	"While" condition=LiteralsExpression block=Block;
		public ParserRule getRule() { return rule; }

		//"While" condition=LiteralsExpression block=Block
		public Group getGroup() { return cGroup; }

		//"While"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//condition=LiteralsExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//LiteralsExpression
		public RuleCall getConditionLiteralsExpressionParserRuleCall_1_0() { return cConditionLiteralsExpressionParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class ParameterCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_1_0_1 = (RuleCall)cParameterParameterCrossReference_1_0.eContents().get(1);
		
		//ParameterCall:
		//
		//	":" parameter=[Parameter|EString];
		public ParserRule getRule() { return rule; }

		//":" parameter=[Parameter|EString]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_1_0() { return cParameterParameterCrossReference_1_0; }

		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_1_0_1() { return cParameterParameterEStringParserRuleCall_1_0_1; }
	}

	public class EqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//EqualExpression returns Expression:
		//
		//	ComparisonExpression ({Equals.lhs=current} "=" rhs=ComparisonExpression)*;
		public ParserRule getRule() { return rule; }

		//ComparisonExpression ({Equals.lhs=current} "=" rhs=ComparisonExpression)*
		public Group getGroup() { return cGroup; }

		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }

		//({Equals.lhs=current} "=" rhs=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.lhs=current}
		public Action getEqualsLhsAction_1_0() { return cEqualsLhsAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_1_2_0() { return cRhsComparisonExpressionParserRuleCall_1_2_0; }
	}

	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLowerLhsAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAddExpressionParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ComparisonExpression returns Expression:
		//
		//	AddExpression (({Greater.lhs=current} ">" | {Lower.lhs=current} "<") rhs=AddExpression)*;
		public ParserRule getRule() { return rule; }

		//AddExpression (({Greater.lhs=current} ">" | {Lower.lhs=current} "<") rhs=AddExpression)*
		public Group getGroup() { return cGroup; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }

		//(({Greater.lhs=current} ">" | {Lower.lhs=current} "<") rhs=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Greater.lhs=current} ">" | {Lower.lhs=current} "<"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Greater.lhs=current} ">"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Greater.lhs=current}
		public Action getGreaterLhsAction_1_0_0_0() { return cGreaterLhsAction_1_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0_1() { return cGreaterThanSignKeyword_1_0_0_1; }

		//{Lower.lhs=current} "<"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Lower.lhs=current}
		public Action getLowerLhsAction_1_0_1_0() { return cLowerLhsAction_1_0_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }

		//rhs=AddExpression
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//AddExpression
		public RuleCall getRhsAddExpressionParserRuleCall_1_1_0() { return cRhsAddExpressionParserRuleCall_1_1_0; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLhsAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsMultExpressionParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//AddExpression returns Expression:
		//
		//	MultExpression (({Plus.lhs=current} "+" | {Minus.lhs=current} "-") rhs=MultExpression)*;
		public ParserRule getRule() { return rule; }

		//MultExpression (({Plus.lhs=current} "+" | {Minus.lhs=current} "-") rhs=MultExpression)*
		public Group getGroup() { return cGroup; }

		//MultExpression
		public RuleCall getMultExpressionParserRuleCall_0() { return cMultExpressionParserRuleCall_0; }

		//(({Plus.lhs=current} "+" | {Minus.lhs=current} "-") rhs=MultExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.lhs=current} "+" | {Minus.lhs=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.lhs=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.lhs=current}
		public Action getPlusLhsAction_1_0_0_0() { return cPlusLhsAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.lhs=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.lhs=current}
		public Action getMinusLhsAction_1_0_1_0() { return cMinusLhsAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//rhs=MultExpression
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//MultExpression
		public RuleCall getRhsMultExpressionParserRuleCall_1_1_0() { return cRhsMultExpressionParserRuleCall_1_1_0; }
	}

	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLhsAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsLiteralsExpressionParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		////MultExpression returns Expression:
		//
		////	UnaryExpression ( ( ({Mult.left=current} '*')|({Div.left=current} '/') ) right=UnaryExpression)*
		//
		////;
		//
		//MultExpression returns Expression:
		//
		//	LiteralsExpression (({Mult.lhs=current} "*" | {Div.lhs=current} "/") rhs=LiteralsExpression)*;
		public ParserRule getRule() { return rule; }

		//LiteralsExpression (({Mult.lhs=current} "*" | {Div.lhs=current} "/") rhs=LiteralsExpression)*
		public Group getGroup() { return cGroup; }

		//LiteralsExpression
		public RuleCall getLiteralsExpressionParserRuleCall_0() { return cLiteralsExpressionParserRuleCall_0; }

		//(({Mult.lhs=current} "*" | {Div.lhs=current} "/") rhs=LiteralsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mult.lhs=current} "*" | {Div.lhs=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Mult.lhs=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Mult.lhs=current}
		public Action getMultLhsAction_1_0_0_0() { return cMultLhsAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.lhs=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.lhs=current}
		public Action getDivLhsAction_1_0_1_0() { return cDivLhsAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//rhs=LiteralsExpression
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//LiteralsExpression
		public RuleCall getRhsLiteralsExpressionParserRuleCall_1_1_0() { return cRhsLiteralsExpressionParserRuleCall_1_1_0; }
	}

	public class LiteralsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralsExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cEqualExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//LiteralsExpression returns Expression:
		//
		//	ParameterCall | Constant | "(" EqualExpression ")";
		public ParserRule getRule() { return rule; }

		//ParameterCall | Constant | "(" EqualExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterCall
		public RuleCall getParameterCallParserRuleCall_0() { return cParameterCallParserRuleCall_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//"(" EqualExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//EqualExpression
		public RuleCall getEqualExpressionParserRuleCall_2_1() { return cEqualExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////PrimaryExpression returns Expression:
		//
		////	ParameterCall |
		//
		////	Constant |
		//
		////	ParenthesisExpression
		//
		////	;
		//
		////ParenthesisExpression returns Expression:
		//
		////	'('	PrimaryExpression ')'
		//
		////	;
		//
		////Plus returns Plus:
		//
		////		lhs=PrimaryExpression "+"	rhs=PrimaryExpression ;
		//
		////
		//
		////Minus returns Minus:
		//
		////	 lhs=PrimaryExpression '-' rhs=PrimaryExpression ;
		//
		////
		//
		////Mult returns Mult:
		//
		////	 lhs=PrimaryExpression '*' rhs=PrimaryExpression ;
		//
		////
		//
		////Div returns Div:
		//
		////	 lhs=PrimaryExpression '/' rhs=PrimaryExpression ;
		//
		////
		//
		////Equals returns Equals:
		//
		////	'(=' lhs=Expression '=' rhs=Expression ')';
		//
		////
		//
		////Greater returns Greater:
		//
		////	'(>' lhs=Expression '>' rhs=Expression ')';
		//
		////
		//
		////Lower returns Lower:
		//
		////	'(<' lhs=Expression '<' rhs=Expression ')';
		//
		//EInt returns ecore::EInt:
		//
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//
		//	{Parameter} ":" name=EString;
		public ParserRule getRule() { return rule; }

		//{Parameter} ":" name=EString
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private LogoProgramElements pLogoProgram;
	private InstructionElements pInstruction;
	private BInstructionElements pBInstruction;
	private BackElements pBack;
	private ForwardElements pForward;
	private LeftElements pLeft;
	private RightElements pRight;
	private PenDownElements pPenDown;
	private PenUpElements pPenUp;
	private ClearElements pClear;
	private ConstantElements pConstant;
	private ProcCallElements pProcCall;
	private ProcDeclarationElements pProcDeclaration;
	private BlockElements pBlock;
	private IfElements pIf;
	private RepeatElements pRepeat;
	private WhileElements pWhile;
	private ParameterCallElements pParameterCall;
	private EqualExpressionElements pEqualExpression;
	private ComparisonExpressionElements pComparisonExpression;
	private AddExpressionElements pAddExpression;
	private MultExpressionElements pMultExpression;
	private LiteralsExpressionElements pLiteralsExpression;
	private EIntElements pEInt;
	private EStringElements pEString;
	private ParameterElements pParameter;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LogoTextualSyntaxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.kermeta.language.sample.logo.LogoTextualSyntax".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogoProgram:
	//
	//	{LogoProgram} instructions+=Instruction instructions+=Instruction*;
	public LogoProgramElements getLogoProgramAccess() {
		return (pLogoProgram != null) ? pLogoProgram : (pLogoProgram = new LogoProgramElements());
	}
	
	public ParserRule getLogoProgramRule() {
		return getLogoProgramAccess().getRule();
	}

	//Instruction:
	//
	//	Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ProcDeclaration | Block | If | Repeat | While;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//BInstruction returns Instruction:
	//
	//	Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ParameterCall | If | Repeat | While;
	public BInstructionElements getBInstructionAccess() {
		return (pBInstruction != null) ? pBInstruction : (pBInstruction = new BInstructionElements());
	}
	
	public ParserRule getBInstructionRule() {
		return getBInstructionAccess().getRule();
	}

	////Expression returns Expression:
	//
	////	Constant | ProcCall | ParameterCall | EqualExpression;
	//
	//Back:
	//
	//	"back" steps=LiteralsExpression;
	public BackElements getBackAccess() {
		return (pBack != null) ? pBack : (pBack = new BackElements());
	}
	
	public ParserRule getBackRule() {
		return getBackAccess().getRule();
	}

	//Forward:
	//
	//	"forward" steps=LiteralsExpression;
	public ForwardElements getForwardAccess() {
		return (pForward != null) ? pForward : (pForward = new ForwardElements());
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}

	//Left:
	//
	//	{Left} "left" angle=LiteralsExpression;
	public LeftElements getLeftAccess() {
		return (pLeft != null) ? pLeft : (pLeft = new LeftElements());
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}

	//Right:
	//
	//	{Right} "right" angle=LiteralsExpression;
	public RightElements getRightAccess() {
		return (pRight != null) ? pRight : (pRight = new RightElements());
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}

	//PenDown:
	//
	//	{PenDown} "pendown";
	public PenDownElements getPenDownAccess() {
		return (pPenDown != null) ? pPenDown : (pPenDown = new PenDownElements());
	}
	
	public ParserRule getPenDownRule() {
		return getPenDownAccess().getRule();
	}

	//PenUp:
	//
	//	{PenUp} "penup";
	public PenUpElements getPenUpAccess() {
		return (pPenUp != null) ? pPenUp : (pPenUp = new PenUpElements());
	}
	
	public ParserRule getPenUpRule() {
		return getPenUpAccess().getRule();
	}

	//Clear:
	//
	//	{Clear} "clear";
	public ClearElements getClearAccess() {
		return (pClear != null) ? pClear : (pClear = new ClearElements());
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}

	//Constant:
	//
	//	{Constant} integerValue=EInt;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ProcCall:
	//
	//	declaration=[ProcDeclaration|EString] "(" actualArgs+=LiteralsExpression? ("," actualArgs+=LiteralsExpression)* ")";
	public ProcCallElements getProcCallAccess() {
		return (pProcCall != null) ? pProcCall : (pProcCall = new ProcCallElements());
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}

	//ProcDeclaration:
	//
	//	{ProcDeclaration} "to" name=EString args+=Parameter* instructions+=Instruction instructions+=Instruction* "end";
	public ProcDeclarationElements getProcDeclarationAccess() {
		return (pProcDeclaration != null) ? pProcDeclaration : (pProcDeclaration = new ProcDeclarationElements());
	}
	
	public ParserRule getProcDeclarationRule() {
		return getProcDeclarationAccess().getRule();
	}

	//Block:
	//
	//	{Block} "[" instructions+=BInstruction* "]";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//If:
	//
	//	"ifelse" condition=LiteralsExpression thenPart=Block elsePart=Block | "if" condition=LiteralsExpression
	//
	//	thenPart=Block;
	public IfElements getIfAccess() {
		return (pIf != null) ? pIf : (pIf = new IfElements());
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Repeat:
	//
	//	"repeat" condition=LiteralsExpression block=Block;
	public RepeatElements getRepeatAccess() {
		return (pRepeat != null) ? pRepeat : (pRepeat = new RepeatElements());
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//While:
	//
	//	"While" condition=LiteralsExpression block=Block;
	public WhileElements getWhileAccess() {
		return (pWhile != null) ? pWhile : (pWhile = new WhileElements());
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//ParameterCall:
	//
	//	":" parameter=[Parameter|EString];
	public ParameterCallElements getParameterCallAccess() {
		return (pParameterCall != null) ? pParameterCall : (pParameterCall = new ParameterCallElements());
	}
	
	public ParserRule getParameterCallRule() {
		return getParameterCallAccess().getRule();
	}

	//EqualExpression returns Expression:
	//
	//	ComparisonExpression ({Equals.lhs=current} "=" rhs=ComparisonExpression)*;
	public EqualExpressionElements getEqualExpressionAccess() {
		return (pEqualExpression != null) ? pEqualExpression : (pEqualExpression = new EqualExpressionElements());
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}

	//ComparisonExpression returns Expression:
	//
	//	AddExpression (({Greater.lhs=current} ">" | {Lower.lhs=current} "<") rhs=AddExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return (pComparisonExpression != null) ? pComparisonExpression : (pComparisonExpression = new ComparisonExpressionElements());
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//AddExpression returns Expression:
	//
	//	MultExpression (({Plus.lhs=current} "+" | {Minus.lhs=current} "-") rhs=MultExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return (pAddExpression != null) ? pAddExpression : (pAddExpression = new AddExpressionElements());
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	////MultExpression returns Expression:
	//
	////	UnaryExpression ( ( ({Mult.left=current} '*')|({Div.left=current} '/') ) right=UnaryExpression)*
	//
	////;
	//
	//MultExpression returns Expression:
	//
	//	LiteralsExpression (({Mult.lhs=current} "*" | {Div.lhs=current} "/") rhs=LiteralsExpression)*;
	public MultExpressionElements getMultExpressionAccess() {
		return (pMultExpression != null) ? pMultExpression : (pMultExpression = new MultExpressionElements());
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//LiteralsExpression returns Expression:
	//
	//	ParameterCall | Constant | "(" EqualExpression ")";
	public LiteralsExpressionElements getLiteralsExpressionAccess() {
		return (pLiteralsExpression != null) ? pLiteralsExpression : (pLiteralsExpression = new LiteralsExpressionElements());
	}
	
	public ParserRule getLiteralsExpressionRule() {
		return getLiteralsExpressionAccess().getRule();
	}

	////PrimaryExpression returns Expression:
	//
	////	ParameterCall |
	//
	////	Constant |
	//
	////	ParenthesisExpression
	//
	////	;
	//
	////ParenthesisExpression returns Expression:
	//
	////	'('	PrimaryExpression ')'
	//
	////	;
	//
	////Plus returns Plus:
	//
	////		lhs=PrimaryExpression "+"	rhs=PrimaryExpression ;
	//
	////
	//
	////Minus returns Minus:
	//
	////	 lhs=PrimaryExpression '-' rhs=PrimaryExpression ;
	//
	////
	//
	////Mult returns Mult:
	//
	////	 lhs=PrimaryExpression '*' rhs=PrimaryExpression ;
	//
	////
	//
	////Div returns Div:
	//
	////	 lhs=PrimaryExpression '/' rhs=PrimaryExpression ;
	//
	////
	//
	////Equals returns Equals:
	//
	////	'(=' lhs=Expression '=' rhs=Expression ')';
	//
	////
	//
	////Greater returns Greater:
	//
	////	'(>' lhs=Expression '>' rhs=Expression ')';
	//
	////
	//
	////Lower returns Lower:
	//
	////	'(<' lhs=Expression '<' rhs=Expression ')';
	//
	//EInt returns ecore::EInt:
	//
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EString returns ecore::EString:
	//
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Parameter:
	//
	//	{Parameter} ":" name=EString;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
