/*
* generated by Xtext
*/

package org.kermeta.language.sample.logo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LogoTextualSyntaxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LogoProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogoProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogoProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogoProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInstructionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInstructionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_2_0 = (RuleCall)cInstructionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_3_1_0 = (RuleCall)cInstructionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LogoProgram:
		//
		//	{LogoProgram} "LogoProgram" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")?
		//
		//	"}";
		public ParserRule getRule() { return rule; }

		//{LogoProgram} "LogoProgram" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{LogoProgram}
		public Action getLogoProgramAction_0() { return cLogoProgramAction_0; }

		//"LogoProgram"
		public Keyword getLogoProgramKeyword_1() { return cLogoProgramKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"instructions"
		public Keyword getInstructionsKeyword_3_0() { return cInstructionsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_2() { return cInstructionsAssignment_3_2; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_2_0() { return cInstructionsInstructionParserRuleCall_3_2_0; }

		//("," instructions+=Instruction)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_3_1() { return cInstructionsAssignment_3_3_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_3_1_0() { return cInstructionsInstructionParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPenDownParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPenUpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClearParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConstantParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cProcCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cProcDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cBlockParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIfParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cControlStructure_ImplParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRepeatParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cWhileParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cParameterCallParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPlusParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cMinusParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cMultParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cDivParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cEqualsParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cGreaterParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLowerParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		
		//Instruction:
		//
		//	Back | Forward | Left | Right | PenDown | PenUp | Clear | Constant | ProcCall | ProcDeclaration | Block | If |
		//
		//	ControlStructure_Impl | Repeat | While | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;
		public ParserRule getRule() { return rule; }

		//Back | Forward | Left | Right | PenDown | PenUp | Clear | Constant | ProcCall | ProcDeclaration | Block | If |
		//
		//ControlStructure_Impl | Repeat | While | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower
		public Alternatives getAlternatives() { return cAlternatives; }

		//Back
		public RuleCall getBackParserRuleCall_0() { return cBackParserRuleCall_0; }

		//Forward
		public RuleCall getForwardParserRuleCall_1() { return cForwardParserRuleCall_1; }

		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }

		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }

		//PenDown
		public RuleCall getPenDownParserRuleCall_4() { return cPenDownParserRuleCall_4; }

		//PenUp
		public RuleCall getPenUpParserRuleCall_5() { return cPenUpParserRuleCall_5; }

		//Clear
		public RuleCall getClearParserRuleCall_6() { return cClearParserRuleCall_6; }

		//Constant
		public RuleCall getConstantParserRuleCall_7() { return cConstantParserRuleCall_7; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_8() { return cProcCallParserRuleCall_8; }

		//ProcDeclaration
		public RuleCall getProcDeclarationParserRuleCall_9() { return cProcDeclarationParserRuleCall_9; }

		//Block
		public RuleCall getBlockParserRuleCall_10() { return cBlockParserRuleCall_10; }

		//If
		public RuleCall getIfParserRuleCall_11() { return cIfParserRuleCall_11; }

		//ControlStructure_Impl
		public RuleCall getControlStructure_ImplParserRuleCall_12() { return cControlStructure_ImplParserRuleCall_12; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_13() { return cRepeatParserRuleCall_13; }

		//While
		public RuleCall getWhileParserRuleCall_14() { return cWhileParserRuleCall_14; }

		//ParameterCall
		public RuleCall getParameterCallParserRuleCall_15() { return cParameterCallParserRuleCall_15; }

		//Plus
		public RuleCall getPlusParserRuleCall_16() { return cPlusParserRuleCall_16; }

		//Minus
		public RuleCall getMinusParserRuleCall_17() { return cMinusParserRuleCall_17; }

		//Mult
		public RuleCall getMultParserRuleCall_18() { return cMultParserRuleCall_18; }

		//Div
		public RuleCall getDivParserRuleCall_19() { return cDivParserRuleCall_19; }

		//Equals
		public RuleCall getEqualsParserRuleCall_20() { return cEqualsParserRuleCall_20; }

		//Greater
		public RuleCall getGreaterParserRuleCall_21() { return cGreaterParserRuleCall_21; }

		//Lower
		public RuleCall getLowerParserRuleCall_22() { return cLowerParserRuleCall_22; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMinusParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMultParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDivParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEqualsParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGreaterParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLowerParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Expression:
		//
		//	Constant | ProcCall | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;
		public ParserRule getRule() { return rule; }

		//Constant | ProcCall | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_1() { return cProcCallParserRuleCall_1; }

		//ParameterCall
		public RuleCall getParameterCallParserRuleCall_2() { return cParameterCallParserRuleCall_2; }

		//Plus
		public RuleCall getPlusParserRuleCall_3() { return cPlusParserRuleCall_3; }

		//Minus
		public RuleCall getMinusParserRuleCall_4() { return cMinusParserRuleCall_4; }

		//Mult
		public RuleCall getMultParserRuleCall_5() { return cMultParserRuleCall_5; }

		//Div
		public RuleCall getDivParserRuleCall_6() { return cDivParserRuleCall_6; }

		//Equals
		public RuleCall getEqualsParserRuleCall_7() { return cEqualsParserRuleCall_7; }

		//Greater
		public RuleCall getGreaterParserRuleCall_8() { return cGreaterParserRuleCall_8; }

		//Lower
		public RuleCall getLowerParserRuleCall_9() { return cLowerParserRuleCall_9; }
	}

	public class BackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Back");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStepsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsExpressionParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Back:
		//
		//	"Back" "{" "steps" steps=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Back" "{" "steps" steps=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Back"
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"steps"
		public Keyword getStepsKeyword_2() { return cStepsKeyword_2; }

		//steps=Expression
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }

		//Expression
		public RuleCall getStepsExpressionParserRuleCall_3_0() { return cStepsExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStepsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsExpressionParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Forward:
		//
		//	"Forward" "{" "steps" steps=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Forward" "{" "steps" steps=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Forward"
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"steps"
		public Keyword getStepsKeyword_2() { return cStepsKeyword_2; }

		//steps=Expression
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }

		//Expression
		public RuleCall getStepsExpressionParserRuleCall_3_0() { return cStepsExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAngleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAngleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAngleExpressionParserRuleCall_3_1_0 = (RuleCall)cAngleAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Left:
		//
		//	{Left} "Left" "{" ("angle" angle=Expression)? "}";
		public ParserRule getRule() { return rule; }

		//{Left} "Left" "{" ("angle" angle=Expression)? "}"
		public Group getGroup() { return cGroup; }

		//{Left}
		public Action getLeftAction_0() { return cLeftAction_0; }

		//"Left"
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("angle" angle=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"angle"
		public Keyword getAngleKeyword_3_0() { return cAngleKeyword_3_0; }

		//angle=Expression
		public Assignment getAngleAssignment_3_1() { return cAngleAssignment_3_1; }

		//Expression
		public RuleCall getAngleExpressionParserRuleCall_3_1_0() { return cAngleExpressionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAngleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAngleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAngleExpressionParserRuleCall_3_1_0 = (RuleCall)cAngleAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Right:
		//
		//	{Right} "Right" "{" ("angle" angle=Expression)? "}";
		public ParserRule getRule() { return rule; }

		//{Right} "Right" "{" ("angle" angle=Expression)? "}"
		public Group getGroup() { return cGroup; }

		//{Right}
		public Action getRightAction_0() { return cRightAction_0; }

		//"Right"
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("angle" angle=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"angle"
		public Keyword getAngleKeyword_3_0() { return cAngleKeyword_3_0; }

		//angle=Expression
		public Assignment getAngleAssignment_3_1() { return cAngleAssignment_3_1; }

		//Expression
		public RuleCall getAngleExpressionParserRuleCall_3_1_0() { return cAngleExpressionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PenDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PenDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenDownAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPenDownKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenDown:
		//
		//	{PenDown} "PenDown";
		public ParserRule getRule() { return rule; }

		//{PenDown} "PenDown"
		public Group getGroup() { return cGroup; }

		//{PenDown}
		public Action getPenDownAction_0() { return cPenDownAction_0; }

		//"PenDown"
		public Keyword getPenDownKeyword_1() { return cPenDownKeyword_1; }
	}

	public class PenUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PenUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenUpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPenUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenUp:
		//
		//	{PenUp} "PenUp";
		public ParserRule getRule() { return rule; }

		//{PenUp} "PenUp"
		public Group getGroup() { return cGroup; }

		//{PenUp}
		public Action getPenUpAction_0() { return cPenUpAction_0; }

		//"PenUp"
		public Keyword getPenUpKeyword_1() { return cPenUpKeyword_1; }
	}

	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Clear:
		//
		//	{Clear} "Clear";
		public ParserRule getRule() { return rule; }

		//{Clear} "Clear"
		public Group getGroup() { return cGroup; }

		//{Clear}
		public Action getClearAction_0() { return cClearAction_0; }

		//"Clear"
		public Keyword getClearKeyword_1() { return cClearKeyword_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntegerValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntegerValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntegerValueEIntParserRuleCall_3_1_0 = (RuleCall)cIntegerValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//
		//	{Constant} "Constant" "{" ("integerValue" integerValue=EInt)? "}";
		public ParserRule getRule() { return rule; }

		//{Constant} "Constant" "{" ("integerValue" integerValue=EInt)? "}"
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//"Constant"
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("integerValue" integerValue=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"integerValue"
		public Keyword getIntegerValueKeyword_3_0() { return cIntegerValueKeyword_3_0; }

		//integerValue=EInt
		public Assignment getIntegerValueAssignment_3_1() { return cIntegerValueAssignment_3_1; }

		//EInt
		public RuleCall getIntegerValueEIntParserRuleCall_3_1_0() { return cIntegerValueEIntParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDeclarationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeclarationProcDeclarationCrossReference_3_0 = (CrossReference)cDeclarationAssignment_3.eContents().get(0);
		private final RuleCall cDeclarationProcDeclarationEStringParserRuleCall_3_0_1 = (RuleCall)cDeclarationProcDeclarationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActualArgsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActualArgsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActualArgsExpressionParserRuleCall_4_2_0 = (RuleCall)cActualArgsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cActualArgsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cActualArgsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cActualArgsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProcCall:
		//
		//	"ProcCall" "{" "declaration" declaration=[ProcDeclaration|EString] ("actualArgs" "{" actualArgs+=Expression (","
		//
		//	actualArgs+=Expression)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"ProcCall" "{" "declaration" declaration=[ProcDeclaration|EString] ("actualArgs" "{" actualArgs+=Expression (","
		//
		//actualArgs+=Expression)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"ProcCall"
		public Keyword getProcCallKeyword_0() { return cProcCallKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"declaration"
		public Keyword getDeclarationKeyword_2() { return cDeclarationKeyword_2; }

		//declaration=[ProcDeclaration|EString]
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }

		//[ProcDeclaration|EString]
		public CrossReference getDeclarationProcDeclarationCrossReference_3_0() { return cDeclarationProcDeclarationCrossReference_3_0; }

		//EString
		public RuleCall getDeclarationProcDeclarationEStringParserRuleCall_3_0_1() { return cDeclarationProcDeclarationEStringParserRuleCall_3_0_1; }

		//("actualArgs" "{" actualArgs+=Expression ("," actualArgs+=Expression)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"actualArgs"
		public Keyword getActualArgsKeyword_4_0() { return cActualArgsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//actualArgs+=Expression
		public Assignment getActualArgsAssignment_4_2() { return cActualArgsAssignment_4_2; }

		//Expression
		public RuleCall getActualArgsExpressionParserRuleCall_4_2_0() { return cActualArgsExpressionParserRuleCall_4_2_0; }

		//("," actualArgs+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//actualArgs+=Expression
		public Assignment getActualArgsAssignment_4_3_1() { return cActualArgsAssignment_4_3_1; }

		//Expression
		public RuleCall getActualArgsExpressionParserRuleCall_4_3_1_0() { return cActualArgsExpressionParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ProcDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cProcCallKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cProcCallAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cProcCallProcCallCrossReference_4_2_0 = (CrossReference)cProcCallAssignment_4_2.eContents().get(0);
		private final RuleCall cProcCallProcCallEStringParserRuleCall_4_2_0_1 = (RuleCall)cProcCallProcCallCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cProcCallAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cProcCallProcCallCrossReference_4_3_1_0 = (CrossReference)cProcCallAssignment_4_3_1.eContents().get(0);
		private final RuleCall cProcCallProcCallEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cProcCallProcCallCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cArgsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cArgsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgsParameterParserRuleCall_5_2_0 = (RuleCall)cArgsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cArgsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cArgsParameterParserRuleCall_5_3_1_0 = (RuleCall)cArgsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInstructionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInstructionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_2_0 = (RuleCall)cInstructionsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_3_1_0 = (RuleCall)cInstructionsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ProcDeclaration:
		//
		//	{ProcDeclaration} "ProcDeclaration" name=EString "{" ("procCall" "(" procCall+=[ProcCall|EString] (","
		//
		//	procCall+=[ProcCall|EString])* ")")? ("args" "{" args+=Parameter ("," args+=Parameter)* "}")? ("instructions" "{"
		//
		//	instructions+=Instruction ("," instructions+=Instruction)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{ProcDeclaration} "ProcDeclaration" name=EString "{" ("procCall" "(" procCall+=[ProcCall|EString] (","
		//
		//procCall+=[ProcCall|EString])* ")")? ("args" "{" args+=Parameter ("," args+=Parameter)* "}")? ("instructions" "{"
		//
		//instructions+=Instruction ("," instructions+=Instruction)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{ProcDeclaration}
		public Action getProcDeclarationAction_0() { return cProcDeclarationAction_0; }

		//"ProcDeclaration"
		public Keyword getProcDeclarationKeyword_1() { return cProcDeclarationKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("procCall" "(" procCall+=[ProcCall|EString] ("," procCall+=[ProcCall|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"procCall"
		public Keyword getProcCallKeyword_4_0() { return cProcCallKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//procCall+=[ProcCall|EString]
		public Assignment getProcCallAssignment_4_2() { return cProcCallAssignment_4_2; }

		//[ProcCall|EString]
		public CrossReference getProcCallProcCallCrossReference_4_2_0() { return cProcCallProcCallCrossReference_4_2_0; }

		//EString
		public RuleCall getProcCallProcCallEStringParserRuleCall_4_2_0_1() { return cProcCallProcCallEStringParserRuleCall_4_2_0_1; }

		//("," procCall+=[ProcCall|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//procCall+=[ProcCall|EString]
		public Assignment getProcCallAssignment_4_3_1() { return cProcCallAssignment_4_3_1; }

		//[ProcCall|EString]
		public CrossReference getProcCallProcCallCrossReference_4_3_1_0() { return cProcCallProcCallCrossReference_4_3_1_0; }

		//EString
		public RuleCall getProcCallProcCallEStringParserRuleCall_4_3_1_0_1() { return cProcCallProcCallEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//("args" "{" args+=Parameter ("," args+=Parameter)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"args"
		public Keyword getArgsKeyword_5_0() { return cArgsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//args+=Parameter
		public Assignment getArgsAssignment_5_2() { return cArgsAssignment_5_2; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_5_2_0() { return cArgsParameterParserRuleCall_5_2_0; }

		//("," args+=Parameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//args+=Parameter
		public Assignment getArgsAssignment_5_3_1() { return cArgsAssignment_5_3_1; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_5_3_1_0() { return cArgsParameterParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"instructions"
		public Keyword getInstructionsKeyword_6_0() { return cInstructionsKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_6_2() { return cInstructionsAssignment_6_2; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_2_0() { return cInstructionsInstructionParserRuleCall_6_2_0; }

		//("," instructions+=Instruction)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_6_3_1() { return cInstructionsAssignment_6_3_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_3_1_0() { return cInstructionsInstructionParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInstructionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInstructionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_2_0 = (RuleCall)cInstructionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_3_1_0 = (RuleCall)cInstructionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block:
		//
		//	{Block} "Block" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Block} "Block" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"Block"
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"instructions"
		public Keyword getInstructionsKeyword_3_0() { return cInstructionsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_2() { return cInstructionsAssignment_3_2; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_2_0() { return cInstructionsInstructionParserRuleCall_3_2_0; }

		//("," instructions+=Instruction)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_3_1() { return cInstructionsAssignment_3_3_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_3_1_0() { return cInstructionsInstructionParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cThenPartKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPartBlockParserRuleCall_4_0 = (RuleCall)cThenPartAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElsePartKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElsePartAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElsePartBlockParserRuleCall_5_1_0 = (RuleCall)cElsePartAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//If:
		//
		//	"If" "{" ("condition" condition=Expression)? "thenPart" thenPart=Block ("elsePart" elsePart=Block)? "}";
		public ParserRule getRule() { return rule; }

		//"If" "{" ("condition" condition=Expression)? "thenPart" thenPart=Block ("elsePart" elsePart=Block)? "}"
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("condition" condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"condition"
		public Keyword getConditionKeyword_2_0() { return cConditionKeyword_2_0; }

		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }

		//"thenPart"
		public Keyword getThenPartKeyword_3() { return cThenPartKeyword_3; }

		//thenPart=Block
		public Assignment getThenPartAssignment_4() { return cThenPartAssignment_4; }

		//Block
		public RuleCall getThenPartBlockParserRuleCall_4_0() { return cThenPartBlockParserRuleCall_4_0; }

		//("elsePart" elsePart=Block)?
		public Group getGroup_5() { return cGroup_5; }

		//"elsePart"
		public Keyword getElsePartKeyword_5_0() { return cElsePartKeyword_5_0; }

		//elsePart=Block
		public Assignment getElsePartAssignment_5_1() { return cElsePartAssignment_5_1; }

		//Block
		public RuleCall getElsePartBlockParserRuleCall_5_1_0() { return cElsePartBlockParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ControlStructure_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlStructure_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlStructureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cControlStructureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ControlStructure_Impl returns ControlStructure:
		//
		//	{ControlStructure} "ControlStructure" "{" ("condition" condition=Expression)? "}";
		public ParserRule getRule() { return rule; }

		//{ControlStructure} "ControlStructure" "{" ("condition" condition=Expression)? "}"
		public Group getGroup() { return cGroup; }

		//{ControlStructure}
		public Action getControlStructureAction_0() { return cControlStructureAction_0; }

		//"ControlStructure"
		public Keyword getControlStructureKeyword_1() { return cControlStructureKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("condition" condition=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"condition"
		public Keyword getConditionKeyword_3_0() { return cConditionKeyword_3_0; }

		//condition=Expression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_1_0() { return cConditionExpressionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cBlockKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Repeat:
		//
		//	"Repeat" "{" ("condition" condition=Expression)? "block" block=Block "}";
		public ParserRule getRule() { return rule; }

		//"Repeat" "{" ("condition" condition=Expression)? "block" block=Block "}"
		public Group getGroup() { return cGroup; }

		//"Repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("condition" condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"condition"
		public Keyword getConditionKeyword_2_0() { return cConditionKeyword_2_0; }

		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }

		//"block"
		public Keyword getBlockKeyword_3() { return cBlockKeyword_3; }

		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cBlockKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//While:
		//
		//	"While" "{" ("condition" condition=Expression)? "block" block=Block "}";
		public ParserRule getRule() { return rule; }

		//"While" "{" ("condition" condition=Expression)? "block" block=Block "}"
		public Group getGroup() { return cGroup; }

		//"While"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("condition" condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"condition"
		public Keyword getConditionKeyword_2_0() { return cConditionKeyword_2_0; }

		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }

		//"block"
		public Keyword getBlockKeyword_3() { return cBlockKeyword_3; }

		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParameterCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterParameterCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_3_0_1 = (RuleCall)cParameterParameterCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterCall:
		//
		//	"ParameterCall" "{" "parameter" parameter=[Parameter|EString] "}";
		public ParserRule getRule() { return rule; }

		//"ParameterCall" "{" "parameter" parameter=[Parameter|EString] "}"
		public Group getGroup() { return cGroup; }

		//"ParameterCall"
		public Keyword getParameterCallKeyword_0() { return cParameterCallKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"parameter"
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }

		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }

		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_3_0() { return cParameterParameterCrossReference_3_0; }

		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_3_0_1() { return cParameterParameterEStringParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Plus:
		//
		//	"Plus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Plus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Plus"
		public Keyword getPlusKeyword_0() { return cPlusKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Minus:
		//
		//	"Minus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Minus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Minus"
		public Keyword getMinusKeyword_0() { return cMinusKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mult:
		//
		//	"Mult" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Mult" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Mult"
		public Keyword getMultKeyword_0() { return cMultKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Div:
		//
		//	"Div" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Div" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Div"
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Equals:
		//
		//	"Equals" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Equals" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Equals"
		public Keyword getEqualsKeyword_0() { return cEqualsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class GreaterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greater");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Greater:
		//
		//	"Greater" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Greater" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Greater"
		public Keyword getGreaterKeyword_0() { return cGreaterKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExpressionParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExpressionParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Lower:
		//
		//	"Lower" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Lower" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Lower"
		public Keyword getLowerKeyword_0() { return cLowerKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"lhs"
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }

		//lhs=Expression
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_3_0() { return cLhsExpressionParserRuleCall_3_0; }

		//"rhs"
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }

		//rhs=Expression
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_5_0() { return cRhsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//
		//	{Parameter} "Parameter" name=EString;
		public ParserRule getRule() { return rule; }

		//{Parameter} "Parameter" name=EString
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//"Parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private LogoProgramElements pLogoProgram;
	private InstructionElements pInstruction;
	private ExpressionElements pExpression;
	private BackElements pBack;
	private ForwardElements pForward;
	private LeftElements pLeft;
	private RightElements pRight;
	private PenDownElements pPenDown;
	private PenUpElements pPenUp;
	private ClearElements pClear;
	private ConstantElements pConstant;
	private ProcCallElements pProcCall;
	private ProcDeclarationElements pProcDeclaration;
	private BlockElements pBlock;
	private IfElements pIf;
	private ControlStructure_ImplElements pControlStructure_Impl;
	private RepeatElements pRepeat;
	private WhileElements pWhile;
	private ParameterCallElements pParameterCall;
	private PlusElements pPlus;
	private MinusElements pMinus;
	private MultElements pMult;
	private DivElements pDiv;
	private EqualsElements pEquals;
	private GreaterElements pGreater;
	private LowerElements pLower;
	private EIntElements pEInt;
	private EStringElements pEString;
	private ParameterElements pParameter;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LogoTextualSyntaxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.kermeta.language.sample.logo.LogoTextualSyntax".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogoProgram:
	//
	//	{LogoProgram} "LogoProgram" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")?
	//
	//	"}";
	public LogoProgramElements getLogoProgramAccess() {
		return (pLogoProgram != null) ? pLogoProgram : (pLogoProgram = new LogoProgramElements());
	}
	
	public ParserRule getLogoProgramRule() {
		return getLogoProgramAccess().getRule();
	}

	//Instruction:
	//
	//	Back | Forward | Left | Right | PenDown | PenUp | Clear | Constant | ProcCall | ProcDeclaration | Block | If |
	//
	//	ControlStructure_Impl | Repeat | While | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Expression:
	//
	//	Constant | ProcCall | ParameterCall | Plus | Minus | Mult | Div | Equals | Greater | Lower;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Back:
	//
	//	"Back" "{" "steps" steps=Expression "}";
	public BackElements getBackAccess() {
		return (pBack != null) ? pBack : (pBack = new BackElements());
	}
	
	public ParserRule getBackRule() {
		return getBackAccess().getRule();
	}

	//Forward:
	//
	//	"Forward" "{" "steps" steps=Expression "}";
	public ForwardElements getForwardAccess() {
		return (pForward != null) ? pForward : (pForward = new ForwardElements());
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}

	//Left:
	//
	//	{Left} "Left" "{" ("angle" angle=Expression)? "}";
	public LeftElements getLeftAccess() {
		return (pLeft != null) ? pLeft : (pLeft = new LeftElements());
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}

	//Right:
	//
	//	{Right} "Right" "{" ("angle" angle=Expression)? "}";
	public RightElements getRightAccess() {
		return (pRight != null) ? pRight : (pRight = new RightElements());
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}

	//PenDown:
	//
	//	{PenDown} "PenDown";
	public PenDownElements getPenDownAccess() {
		return (pPenDown != null) ? pPenDown : (pPenDown = new PenDownElements());
	}
	
	public ParserRule getPenDownRule() {
		return getPenDownAccess().getRule();
	}

	//PenUp:
	//
	//	{PenUp} "PenUp";
	public PenUpElements getPenUpAccess() {
		return (pPenUp != null) ? pPenUp : (pPenUp = new PenUpElements());
	}
	
	public ParserRule getPenUpRule() {
		return getPenUpAccess().getRule();
	}

	//Clear:
	//
	//	{Clear} "Clear";
	public ClearElements getClearAccess() {
		return (pClear != null) ? pClear : (pClear = new ClearElements());
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}

	//Constant:
	//
	//	{Constant} "Constant" "{" ("integerValue" integerValue=EInt)? "}";
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ProcCall:
	//
	//	"ProcCall" "{" "declaration" declaration=[ProcDeclaration|EString] ("actualArgs" "{" actualArgs+=Expression (","
	//
	//	actualArgs+=Expression)* "}")? "}";
	public ProcCallElements getProcCallAccess() {
		return (pProcCall != null) ? pProcCall : (pProcCall = new ProcCallElements());
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}

	//ProcDeclaration:
	//
	//	{ProcDeclaration} "ProcDeclaration" name=EString "{" ("procCall" "(" procCall+=[ProcCall|EString] (","
	//
	//	procCall+=[ProcCall|EString])* ")")? ("args" "{" args+=Parameter ("," args+=Parameter)* "}")? ("instructions" "{"
	//
	//	instructions+=Instruction ("," instructions+=Instruction)* "}")? "}";
	public ProcDeclarationElements getProcDeclarationAccess() {
		return (pProcDeclaration != null) ? pProcDeclaration : (pProcDeclaration = new ProcDeclarationElements());
	}
	
	public ParserRule getProcDeclarationRule() {
		return getProcDeclarationAccess().getRule();
	}

	//Block:
	//
	//	{Block} "Block" "{" ("instructions" "{" instructions+=Instruction ("," instructions+=Instruction)* "}")? "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//If:
	//
	//	"If" "{" ("condition" condition=Expression)? "thenPart" thenPart=Block ("elsePart" elsePart=Block)? "}";
	public IfElements getIfAccess() {
		return (pIf != null) ? pIf : (pIf = new IfElements());
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//ControlStructure_Impl returns ControlStructure:
	//
	//	{ControlStructure} "ControlStructure" "{" ("condition" condition=Expression)? "}";
	public ControlStructure_ImplElements getControlStructure_ImplAccess() {
		return (pControlStructure_Impl != null) ? pControlStructure_Impl : (pControlStructure_Impl = new ControlStructure_ImplElements());
	}
	
	public ParserRule getControlStructure_ImplRule() {
		return getControlStructure_ImplAccess().getRule();
	}

	//Repeat:
	//
	//	"Repeat" "{" ("condition" condition=Expression)? "block" block=Block "}";
	public RepeatElements getRepeatAccess() {
		return (pRepeat != null) ? pRepeat : (pRepeat = new RepeatElements());
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//While:
	//
	//	"While" "{" ("condition" condition=Expression)? "block" block=Block "}";
	public WhileElements getWhileAccess() {
		return (pWhile != null) ? pWhile : (pWhile = new WhileElements());
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//ParameterCall:
	//
	//	"ParameterCall" "{" "parameter" parameter=[Parameter|EString] "}";
	public ParameterCallElements getParameterCallAccess() {
		return (pParameterCall != null) ? pParameterCall : (pParameterCall = new ParameterCallElements());
	}
	
	public ParserRule getParameterCallRule() {
		return getParameterCallAccess().getRule();
	}

	//Plus:
	//
	//	"Plus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public PlusElements getPlusAccess() {
		return (pPlus != null) ? pPlus : (pPlus = new PlusElements());
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}

	//Minus:
	//
	//	"Minus" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public MinusElements getMinusAccess() {
		return (pMinus != null) ? pMinus : (pMinus = new MinusElements());
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}

	//Mult:
	//
	//	"Mult" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public MultElements getMultAccess() {
		return (pMult != null) ? pMult : (pMult = new MultElements());
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}

	//Div:
	//
	//	"Div" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public DivElements getDivAccess() {
		return (pDiv != null) ? pDiv : (pDiv = new DivElements());
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}

	//Equals:
	//
	//	"Equals" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public EqualsElements getEqualsAccess() {
		return (pEquals != null) ? pEquals : (pEquals = new EqualsElements());
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}

	//Greater:
	//
	//	"Greater" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public GreaterElements getGreaterAccess() {
		return (pGreater != null) ? pGreater : (pGreater = new GreaterElements());
	}
	
	public ParserRule getGreaterRule() {
		return getGreaterAccess().getRule();
	}

	//Lower:
	//
	//	"Lower" "{" "lhs" lhs=Expression "rhs" rhs=Expression "}";
	public LowerElements getLowerAccess() {
		return (pLower != null) ? pLower : (pLower = new LowerElements());
	}
	
	public ParserRule getLowerRule() {
		return getLowerAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EString returns ecore::EString:
	//
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Parameter:
	//
	//	{Parameter} "Parameter" name=EString;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
