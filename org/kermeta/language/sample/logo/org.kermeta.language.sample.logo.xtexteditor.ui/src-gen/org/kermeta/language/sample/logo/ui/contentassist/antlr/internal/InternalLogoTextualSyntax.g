/*
* generated by Xtext
*/
grammar InternalLogoTextualSyntax;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.kermeta.language.sample.logo.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.kermeta.language.sample.logo.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.kermeta.language.sample.logo.services.LogoTextualSyntaxGrammarAccess;

}

@parser::members {
 
 	private LogoTextualSyntaxGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LogoTextualSyntaxGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLogoProgram
entryRuleLogoProgram 
:
{ before(grammarAccess.getLogoProgramRule()); }
	 ruleLogoProgram
{ after(grammarAccess.getLogoProgramRule()); } 
	 EOF 
;

// Rule LogoProgram
ruleLogoProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogoProgramAccess().getGroup()); }
(rule__LogoProgram__Group__0)
{ after(grammarAccess.getLogoProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBInstruction
entryRuleBInstruction 
:
{ before(grammarAccess.getBInstructionRule()); }
	 ruleBInstruction
{ after(grammarAccess.getBInstructionRule()); } 
	 EOF 
;

// Rule BInstruction
ruleBInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBInstructionAccess().getAlternatives()); }
(rule__BInstruction__Alternatives)
{ after(grammarAccess.getBInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBack
entryRuleBack 
:
{ before(grammarAccess.getBackRule()); }
	 ruleBack
{ after(grammarAccess.getBackRule()); } 
	 EOF 
;

// Rule Back
ruleBack
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBackAccess().getGroup()); }
(rule__Back__Group__0)
{ after(grammarAccess.getBackAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForward
entryRuleForward 
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForwardAccess().getGroup()); }
(rule__Forward__Group__0)
{ after(grammarAccess.getForwardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeft
entryRuleLeft 
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLeftAccess().getGroup()); }
(rule__Left__Group__0)
{ after(grammarAccess.getLeftAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRight
entryRuleRight 
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRightAccess().getGroup()); }
(rule__Right__Group__0)
{ after(grammarAccess.getRightAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePenDown
entryRulePenDown 
:
{ before(grammarAccess.getPenDownRule()); }
	 rulePenDown
{ after(grammarAccess.getPenDownRule()); } 
	 EOF 
;

// Rule PenDown
rulePenDown
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPenDownAccess().getGroup()); }
(rule__PenDown__Group__0)
{ after(grammarAccess.getPenDownAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePenUp
entryRulePenUp 
:
{ before(grammarAccess.getPenUpRule()); }
	 rulePenUp
{ after(grammarAccess.getPenUpRule()); } 
	 EOF 
;

// Rule PenUp
rulePenUp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPenUpAccess().getGroup()); }
(rule__PenUp__Group__0)
{ after(grammarAccess.getPenUpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClear
entryRuleClear 
:
{ before(grammarAccess.getClearRule()); }
	 ruleClear
{ after(grammarAccess.getClearRule()); } 
	 EOF 
;

// Rule Clear
ruleClear
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClearAccess().getGroup()); }
(rule__Clear__Group__0)
{ after(grammarAccess.getClearAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcCall
entryRuleProcCall 
:
{ before(grammarAccess.getProcCallRule()); }
	 ruleProcCall
{ after(grammarAccess.getProcCallRule()); } 
	 EOF 
;

// Rule ProcCall
ruleProcCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcCallAccess().getGroup()); }
(rule__ProcCall__Group__0)
{ after(grammarAccess.getProcCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcDeclaration
entryRuleProcDeclaration 
:
{ before(grammarAccess.getProcDeclarationRule()); }
	 ruleProcDeclaration
{ after(grammarAccess.getProcDeclarationRule()); } 
	 EOF 
;

// Rule ProcDeclaration
ruleProcDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcDeclarationAccess().getGroup()); }
(rule__ProcDeclaration__Group__0)
{ after(grammarAccess.getProcDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getAlternatives()); }
(rule__If__Alternatives)
{ after(grammarAccess.getIfAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRepeat
entryRuleRepeat 
:
{ before(grammarAccess.getRepeatRule()); }
	 ruleRepeat
{ after(grammarAccess.getRepeatRule()); } 
	 EOF 
;

// Rule Repeat
ruleRepeat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRepeatAccess().getGroup()); }
(rule__Repeat__Group__0)
{ after(grammarAccess.getRepeatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterCall
entryRuleParameterCall 
:
{ before(grammarAccess.getParameterCallRule()); }
	 ruleParameterCall
{ after(grammarAccess.getParameterCallRule()); } 
	 EOF 
;

// Rule ParameterCall
ruleParameterCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterCallAccess().getGroup()); }
(rule__ParameterCall__Group__0)
{ after(grammarAccess.getParameterCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualExpression
entryRuleEqualExpression 
:
{ before(grammarAccess.getEqualExpressionRule()); }
	 ruleEqualExpression
{ after(grammarAccess.getEqualExpressionRule()); } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup()); }
(rule__EqualExpression__Group__0)
{ after(grammarAccess.getEqualExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralsExpression
entryRuleLiteralsExpression 
:
{ before(grammarAccess.getLiteralsExpressionRule()); }
	 ruleLiteralsExpression
{ after(grammarAccess.getLiteralsExpressionRule()); } 
	 EOF 
;

// Rule LiteralsExpression
ruleLiteralsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getAlternatives()); }
(rule__LiteralsExpression__Alternatives)
{ after(grammarAccess.getLiteralsExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getBackParserRuleCall_0()); }
	ruleBack
{ after(grammarAccess.getInstructionAccess().getBackParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForwardParserRuleCall_1()); }
	ruleForward
{ after(grammarAccess.getInstructionAccess().getForwardParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getLeftParserRuleCall_2()); }
	ruleLeft
{ after(grammarAccess.getInstructionAccess().getLeftParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getRightParserRuleCall_3()); }
	ruleRight
{ after(grammarAccess.getInstructionAccess().getRightParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPenDownParserRuleCall_4()); }
	rulePenDown
{ after(grammarAccess.getInstructionAccess().getPenDownParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPenUpParserRuleCall_5()); }
	rulePenUp
{ after(grammarAccess.getInstructionAccess().getPenUpParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getClearParserRuleCall_6()); }
	ruleClear
{ after(grammarAccess.getInstructionAccess().getClearParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getProcCallParserRuleCall_7()); }
	ruleProcCall
{ after(grammarAccess.getInstructionAccess().getProcCallParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getProcDeclarationParserRuleCall_8()); }
	ruleProcDeclaration
{ after(grammarAccess.getInstructionAccess().getProcDeclarationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getBlockParserRuleCall_9()); }
	ruleBlock
{ after(grammarAccess.getInstructionAccess().getBlockParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getIfParserRuleCall_10()); }
	ruleIf
{ after(grammarAccess.getInstructionAccess().getIfParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getRepeatParserRuleCall_11()); }
	ruleRepeat
{ after(grammarAccess.getInstructionAccess().getRepeatParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getWhileParserRuleCall_12()); }
	ruleWhile
{ after(grammarAccess.getInstructionAccess().getWhileParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BInstruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBInstructionAccess().getBackParserRuleCall_0()); }
	ruleBack
{ after(grammarAccess.getBInstructionAccess().getBackParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getForwardParserRuleCall_1()); }
	ruleForward
{ after(grammarAccess.getBInstructionAccess().getForwardParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getLeftParserRuleCall_2()); }
	ruleLeft
{ after(grammarAccess.getBInstructionAccess().getLeftParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getRightParserRuleCall_3()); }
	ruleRight
{ after(grammarAccess.getBInstructionAccess().getRightParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getPenDownParserRuleCall_4()); }
	rulePenDown
{ after(grammarAccess.getBInstructionAccess().getPenDownParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getPenUpParserRuleCall_5()); }
	rulePenUp
{ after(grammarAccess.getBInstructionAccess().getPenUpParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getClearParserRuleCall_6()); }
	ruleClear
{ after(grammarAccess.getBInstructionAccess().getClearParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getProcCallParserRuleCall_7()); }
	ruleProcCall
{ after(grammarAccess.getBInstructionAccess().getProcCallParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getParameterCallParserRuleCall_8()); }
	ruleParameterCall
{ after(grammarAccess.getBInstructionAccess().getParameterCallParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getIfParserRuleCall_9()); }
	ruleIf
{ after(grammarAccess.getBInstructionAccess().getIfParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getRepeatParserRuleCall_10()); }
	ruleRepeat
{ after(grammarAccess.getBInstructionAccess().getRepeatParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getBInstructionAccess().getWhileParserRuleCall_11()); }
	ruleWhile
{ after(grammarAccess.getBInstructionAccess().getWhileParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_0()); }
(rule__If__Group_0__0)
{ after(grammarAccess.getIfAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIfAccess().getGroup_1()); }
(rule__If__Group_1__0)
{ after(grammarAccess.getIfAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_0()); }
(rule__ComparisonExpression__Group_1_0_0__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_1()); }
(rule__ComparisonExpression__Group_1_0_1__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
(rule__AddExpression__Group_1_0_0__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_1()); }
(rule__AddExpression__Group_1_0_1__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0_0()); }
(rule__MultExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0_1()); }
(rule__MultExpression__Group_1_0_1__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getParameterCallParserRuleCall_0()); }
	ruleParameterCall
{ after(grammarAccess.getLiteralsExpressionAccess().getParameterCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralsExpressionAccess().getConstantParserRuleCall_1()); }
	ruleConstant
{ after(grammarAccess.getLiteralsExpressionAccess().getConstantParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralsExpressionAccess().getGroup_2()); }
(rule__LiteralsExpression__Group_2__0)
{ after(grammarAccess.getLiteralsExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LogoProgram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogoProgram__Group__0__Impl
	rule__LogoProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getLogoProgramAction_0()); }
(

)
{ after(grammarAccess.getLogoProgramAccess().getLogoProgramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogoProgram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogoProgram__Group__1__Impl
	rule__LogoProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_1()); }
(rule__LogoProgram__InstructionsAssignment_1)
{ after(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogoProgram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogoProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_2()); }
(rule__LogoProgram__InstructionsAssignment_2)*
{ after(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Back__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Back__Group__0__Impl
	rule__Back__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackAccess().getBackKeyword_0()); }

	'back' 

{ after(grammarAccess.getBackAccess().getBackKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Back__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Back__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackAccess().getStepsAssignment_1()); }
(rule__Back__StepsAssignment_1)
{ after(grammarAccess.getBackAccess().getStepsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Forward__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAccess().getForwardKeyword_0()); }

	'forward' 

{ after(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAccess().getStepsAssignment_1()); }
(rule__Forward__StepsAssignment_1)
{ after(grammarAccess.getForwardAccess().getStepsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Left__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftAccess().getLeftAction_0()); }
(

)
{ after(grammarAccess.getLeftAccess().getLeftAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftAccess().getLeftKeyword_1()); }

	'left' 

{ after(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Left__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftAccess().getAngleAssignment_2()); }
(rule__Left__AngleAssignment_2)
{ after(grammarAccess.getLeftAccess().getAngleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Right__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightAccess().getRightAction_0()); }
(

)
{ after(grammarAccess.getRightAccess().getRightAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Right__Group__1__Impl
	rule__Right__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightAccess().getRightKeyword_1()); }

	'right' 

{ after(grammarAccess.getRightAccess().getRightKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Right__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightAccess().getAngleAssignment_2()); }
(rule__Right__AngleAssignment_2)
{ after(grammarAccess.getRightAccess().getAngleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PenDown__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PenDown__Group__0__Impl
	rule__PenDown__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PenDown__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPenDownAccess().getPenDownAction_0()); }
(

)
{ after(grammarAccess.getPenDownAccess().getPenDownAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PenDown__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PenDown__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PenDown__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPenDownAccess().getPendownKeyword_1()); }

	'pendown' 

{ after(grammarAccess.getPenDownAccess().getPendownKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PenUp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PenUp__Group__0__Impl
	rule__PenUp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PenUp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPenUpAccess().getPenUpAction_0()); }
(

)
{ after(grammarAccess.getPenUpAccess().getPenUpAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PenUp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PenUp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PenUp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPenUpAccess().getPenupKeyword_1()); }

	'penup' 

{ after(grammarAccess.getPenUpAccess().getPenupKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Clear__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clear__Group__0__Impl
	rule__Clear__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getClearAction_0()); }
(

)
{ after(grammarAccess.getClearAccess().getClearAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clear__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clear__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getClearKeyword_1()); }

	'clear' 

{ after(grammarAccess.getClearAccess().getClearKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getConstantAction_0()); }
(

)
{ after(grammarAccess.getConstantAccess().getConstantAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getIntegerValueAssignment_1()); }
(rule__Constant__IntegerValueAssignment_1)
{ after(grammarAccess.getConstantAccess().getIntegerValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group__0__Impl
	rule__ProcCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getDeclarationAssignment_0()); }
(rule__ProcCall__DeclarationAssignment_0)
{ after(grammarAccess.getProcCallAccess().getDeclarationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group__1__Impl
	rule__ProcCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group__2__Impl
	rule__ProcCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getActualArgsAssignment_2()); }
(rule__ProcCall__ActualArgsAssignment_2)?
{ after(grammarAccess.getProcCallAccess().getActualArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group__3__Impl
	rule__ProcCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getGroup_3()); }
(rule__ProcCall__Group_3__0)*
{ after(grammarAccess.getProcCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group_3__0__Impl
	rule__ProcCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getProcCallAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getActualArgsAssignment_3_1()); }
(rule__ProcCall__ActualArgsAssignment_3_1)
{ after(grammarAccess.getProcCallAccess().getActualArgsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__0__Impl
	rule__ProcDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getProcDeclarationAction_0()); }
(

)
{ after(grammarAccess.getProcDeclarationAccess().getProcDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__1__Impl
	rule__ProcDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getToKeyword_1()); }

	'to' 

{ after(grammarAccess.getProcDeclarationAccess().getToKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__2__Impl
	rule__ProcDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getNameAssignment_2()); }
(rule__ProcDeclaration__NameAssignment_2)
{ after(grammarAccess.getProcDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__3__Impl
	rule__ProcDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getArgsAssignment_3()); }
(rule__ProcDeclaration__ArgsAssignment_3)*
{ after(grammarAccess.getProcDeclarationAccess().getArgsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__4__Impl
	rule__ProcDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_4()); }
(rule__ProcDeclaration__InstructionsAssignment_4)
{ after(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__5__Impl
	rule__ProcDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_5()); }
(rule__ProcDeclaration__InstructionsAssignment_5)*
{ after(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getProcDeclarationAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
(rule__Block__InstructionsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_0__0__Impl
	rule__If__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfelseKeyword_0_0()); }

	'ifelse' 

{ after(grammarAccess.getIfAccess().getIfelseKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_0__1__Impl
	rule__If__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getConditionAssignment_0_1()); }
(rule__If__ConditionAssignment_0_1)
{ after(grammarAccess.getIfAccess().getConditionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_0__2__Impl
	rule__If__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenPartAssignment_0_2()); }
(rule__If__ThenPartAssignment_0_2)
{ after(grammarAccess.getIfAccess().getThenPartAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getElsePartAssignment_0_3()); }
(rule__If__ElsePartAssignment_0_3)
{ after(grammarAccess.getIfAccess().getElsePartAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_1__0__Impl
	rule__If__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfKeyword_1_0()); }

	'if' 

{ after(grammarAccess.getIfAccess().getIfKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_1__1__Impl
	rule__If__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getConditionAssignment_1_1()); }
(rule__If__ConditionAssignment_1_1)
{ after(grammarAccess.getIfAccess().getConditionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenPartAssignment_1_2()); }
(rule__If__ThenPartAssignment_1_2)
{ after(grammarAccess.getIfAccess().getThenPartAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Repeat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repeat__Group__0__Impl
	rule__Repeat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }

	'repeat' 

{ after(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repeat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repeat__Group__1__Impl
	rule__Repeat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatAccess().getConditionAssignment_1()); }
(rule__Repeat__ConditionAssignment_1)
{ after(grammarAccess.getRepeatAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repeat__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repeat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatAccess().getBlockAssignment_2()); }
(rule__Repeat__BlockAssignment_2)
{ after(grammarAccess.getRepeatAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'While' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getConditionAssignment_1()); }
(rule__While__ConditionAssignment_1)
{ after(grammarAccess.getWhileAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
(rule__While__BlockAssignment_2)
{ after(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterCall__Group__0__Impl
	rule__ParameterCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterCallAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getParameterCallAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterCallAccess().getParameterAssignment_1()); }
(rule__ParameterCall__ParameterAssignment_1)
{ after(grammarAccess.getParameterCallAccess().getParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__0__Impl
	rule__EqualExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getEqualExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
(rule__EqualExpression__Group_1__0)*
{ after(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__0__Impl
	rule__EqualExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualsLhsAction_1_0()); }
(

)
{ after(grammarAccess.getEqualExpressionAccess().getEqualsLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__1__Impl
	rule__EqualExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getEqualExpressionAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRhsAssignment_1_2()); }
(rule__EqualExpression__RhsAssignment_1_2)
{ after(grammarAccess.getEqualExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
{ after(grammarAccess.getComparisonExpressionAccess().getAddExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)*
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAlternatives_1_0()); }
(rule__ComparisonExpression__Alternatives_1_0)
{ after(grammarAccess.getComparisonExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRhsAssignment_1_1()); }
(rule__ComparisonExpression__RhsAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getRhsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_0__0__Impl
	rule__ComparisonExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGreaterLhsAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getGreaterLhsAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }

	'>' 

{ after(grammarAccess.getComparisonExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_1__0__Impl
	rule__ComparisonExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLowerLhsAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getLowerLhsAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLessThanSignKeyword_1_0_1_1()); }

	'<' 

{ after(grammarAccess.getComparisonExpressionAccess().getLessThanSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getAddExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
(rule__AddExpression__Alternatives_1_0)
{ after(grammarAccess.getAddExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRhsAssignment_1_1()); }
(rule__AddExpression__RhsAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getRhsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__0__Impl
	rule__AddExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getPlusLhsAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getPlusLhsAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_1__0__Impl
	rule__AddExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getMinusLhsAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getMinusLhsAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getLiteralsExpressionParserRuleCall_0()); }
	ruleLiteralsExpression
{ after(grammarAccess.getMultExpressionAccess().getLiteralsExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
(rule__MultExpression__Alternatives_1_0)
{ after(grammarAccess.getMultExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getRhsAssignment_1_1()); }
(rule__MultExpression__RhsAssignment_1_1)
{ after(grammarAccess.getMultExpressionAccess().getRhsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_0__0__Impl
	rule__MultExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getMultLhsAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getMultLhsAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_1__0__Impl
	rule__MultExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getDivLhsAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getDivLhsAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultExpressionAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralsExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_2__0__Impl
	rule__LiteralsExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getLiteralsExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralsExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_2__1__Impl
	rule__LiteralsExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getEqualExpressionParserRuleCall_2_1()); }
	ruleEqualExpression
{ after(grammarAccess.getLiteralsExpressionAccess().getEqualExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralsExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralsExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralsExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralsExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getLiteralsExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__LogoProgram__InstructionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_1_0()); }
	ruleInstruction{ after(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__InstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Back__StepsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackAccess().getStepsLiteralsExpressionParserRuleCall_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getBackAccess().getStepsLiteralsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__StepsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAccess().getStepsLiteralsExpressionParserRuleCall_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getForwardAccess().getStepsLiteralsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Left__AngleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftAccess().getAngleLiteralsExpressionParserRuleCall_2_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getLeftAccess().getAngleLiteralsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Right__AngleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightAccess().getAngleLiteralsExpressionParserRuleCall_2_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getRightAccess().getAngleLiteralsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__IntegerValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getIntegerValueEIntParserRuleCall_1_0()); }
	ruleEInt{ after(grammarAccess.getConstantAccess().getIntegerValueEIntParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__DeclarationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationEStringParserRuleCall_0_0_1()); }
	ruleEString{ after(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationEStringParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ActualArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getActualArgsLiteralsExpressionParserRuleCall_2_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getProcCallAccess().getActualArgsLiteralsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ActualArgsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcCallAccess().getActualArgsLiteralsExpressionParserRuleCall_3_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getProcCallAccess().getActualArgsLiteralsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getProcDeclarationAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__ArgsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_3_0()); }
	ruleParameter{ after(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__InstructionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_4_0()); }
	ruleInstruction{ after(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__InstructionsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_5_0()); }
	ruleInstruction{ after(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__InstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getInstructionsBInstructionParserRuleCall_2_0()); }
	ruleBInstruction{ after(grammarAccess.getBlockAccess().getInstructionsBInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getConditionLiteralsExpressionParserRuleCall_0_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getIfAccess().getConditionLiteralsExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ThenPartAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenPartBlockParserRuleCall_0_2_0()); }
	ruleBlock{ after(grammarAccess.getIfAccess().getThenPartBlockParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ElsePartAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getElsePartBlockParserRuleCall_0_3_0()); }
	ruleBlock{ after(grammarAccess.getIfAccess().getElsePartBlockParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getConditionLiteralsExpressionParserRuleCall_1_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getIfAccess().getConditionLiteralsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ThenPartAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenPartBlockParserRuleCall_1_2_0()); }
	ruleBlock{ after(grammarAccess.getIfAccess().getThenPartBlockParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatAccess().getConditionLiteralsExpressionParserRuleCall_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getRepeatAccess().getConditionLiteralsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getConditionLiteralsExpressionParserRuleCall_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getWhileAccess().getConditionLiteralsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterCall__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterCallAccess().getParameterParameterCrossReference_1_0()); }
(
{ before(grammarAccess.getParameterCallAccess().getParameterParameterEStringParserRuleCall_1_0_1()); }
	ruleEString{ after(grammarAccess.getParameterCallAccess().getParameterParameterEStringParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getParameterCallAccess().getParameterParameterCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRhsComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getEqualExpressionAccess().getRhsComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RhsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRhsAddExpressionParserRuleCall_1_1_0()); }
	ruleAddExpression{ after(grammarAccess.getComparisonExpressionAccess().getRhsAddExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RhsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRhsMultExpressionParserRuleCall_1_1_0()); }
	ruleMultExpression{ after(grammarAccess.getAddExpressionAccess().getRhsMultExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__RhsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getRhsLiteralsExpressionParserRuleCall_1_1_0()); }
	ruleLiteralsExpression{ after(grammarAccess.getMultExpressionAccess().getRhsLiteralsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


