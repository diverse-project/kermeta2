/*
* generated by Xtext
*/
package org.kermeta.language.sample.logo.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.kermeta.language.sample.logo.services.LogoTextualSyntaxGrammarAccess;

public class LogoTextualSyntaxParser extends AbstractContentAssistParser {
	
	@Inject
	private LogoTextualSyntaxGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.kermeta.language.sample.logo.ui.contentassist.antlr.internal.InternalLogoTextualSyntaxParser createParser() {
		org.kermeta.language.sample.logo.ui.contentassist.antlr.internal.InternalLogoTextualSyntaxParser result = new org.kermeta.language.sample.logo.ui.contentassist.antlr.internal.InternalLogoTextualSyntaxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getLogoProgramAccess().getGroup(), "rule__LogoProgram__Group__0");
					put(grammarAccess.getLogoProgramAccess().getGroup_3(), "rule__LogoProgram__Group_3__0");
					put(grammarAccess.getLogoProgramAccess().getGroup_3_3(), "rule__LogoProgram__Group_3_3__0");
					put(grammarAccess.getBackAccess().getGroup(), "rule__Back__Group__0");
					put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
					put(grammarAccess.getLeftAccess().getGroup(), "rule__Left__Group__0");
					put(grammarAccess.getLeftAccess().getGroup_3(), "rule__Left__Group_3__0");
					put(grammarAccess.getRightAccess().getGroup(), "rule__Right__Group__0");
					put(grammarAccess.getRightAccess().getGroup_3(), "rule__Right__Group_3__0");
					put(grammarAccess.getPenDownAccess().getGroup(), "rule__PenDown__Group__0");
					put(grammarAccess.getPenUpAccess().getGroup(), "rule__PenUp__Group__0");
					put(grammarAccess.getClearAccess().getGroup(), "rule__Clear__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getConstantAccess().getGroup_3(), "rule__Constant__Group_3__0");
					put(grammarAccess.getProcCallAccess().getGroup(), "rule__ProcCall__Group__0");
					put(grammarAccess.getProcCallAccess().getGroup_4(), "rule__ProcCall__Group_4__0");
					put(grammarAccess.getProcCallAccess().getGroup_4_3(), "rule__ProcCall__Group_4_3__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup(), "rule__ProcDeclaration__Group__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_4(), "rule__ProcDeclaration__Group_4__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_4_3(), "rule__ProcDeclaration__Group_4_3__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_5(), "rule__ProcDeclaration__Group_5__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_5_3(), "rule__ProcDeclaration__Group_5_3__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_6(), "rule__ProcDeclaration__Group_6__0");
					put(grammarAccess.getProcDeclarationAccess().getGroup_6_3(), "rule__ProcDeclaration__Group_6_3__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_3(), "rule__Block__Group_3__0");
					put(grammarAccess.getBlockAccess().getGroup_3_3(), "rule__Block__Group_3_3__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_2(), "rule__If__Group_2__0");
					put(grammarAccess.getIfAccess().getGroup_5(), "rule__If__Group_5__0");
					put(grammarAccess.getControlStructure_ImplAccess().getGroup(), "rule__ControlStructure_Impl__Group__0");
					put(grammarAccess.getControlStructure_ImplAccess().getGroup_3(), "rule__ControlStructure_Impl__Group_3__0");
					put(grammarAccess.getRepeatAccess().getGroup(), "rule__Repeat__Group__0");
					put(grammarAccess.getRepeatAccess().getGroup_2(), "rule__Repeat__Group_2__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getWhileAccess().getGroup_2(), "rule__While__Group_2__0");
					put(grammarAccess.getParameterCallAccess().getGroup(), "rule__ParameterCall__Group__0");
					put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
					put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
					put(grammarAccess.getMultAccess().getGroup(), "rule__Mult__Group__0");
					put(grammarAccess.getDivAccess().getGroup(), "rule__Div__Group__0");
					put(grammarAccess.getEqualsAccess().getGroup(), "rule__Equals__Group__0");
					put(grammarAccess.getGreaterAccess().getGroup(), "rule__Greater__Group__0");
					put(grammarAccess.getLowerAccess().getGroup(), "rule__Lower__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_3_2(), "rule__LogoProgram__InstructionsAssignment_3_2");
					put(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_3_3_1(), "rule__LogoProgram__InstructionsAssignment_3_3_1");
					put(grammarAccess.getBackAccess().getStepsAssignment_3(), "rule__Back__StepsAssignment_3");
					put(grammarAccess.getForwardAccess().getStepsAssignment_3(), "rule__Forward__StepsAssignment_3");
					put(grammarAccess.getLeftAccess().getAngleAssignment_3_1(), "rule__Left__AngleAssignment_3_1");
					put(grammarAccess.getRightAccess().getAngleAssignment_3_1(), "rule__Right__AngleAssignment_3_1");
					put(grammarAccess.getConstantAccess().getIntegerValueAssignment_3_1(), "rule__Constant__IntegerValueAssignment_3_1");
					put(grammarAccess.getProcCallAccess().getDeclarationAssignment_3(), "rule__ProcCall__DeclarationAssignment_3");
					put(grammarAccess.getProcCallAccess().getActualArgsAssignment_4_2(), "rule__ProcCall__ActualArgsAssignment_4_2");
					put(grammarAccess.getProcCallAccess().getActualArgsAssignment_4_3_1(), "rule__ProcCall__ActualArgsAssignment_4_3_1");
					put(grammarAccess.getProcDeclarationAccess().getNameAssignment_2(), "rule__ProcDeclaration__NameAssignment_2");
					put(grammarAccess.getProcDeclarationAccess().getProcCallAssignment_4_2(), "rule__ProcDeclaration__ProcCallAssignment_4_2");
					put(grammarAccess.getProcDeclarationAccess().getProcCallAssignment_4_3_1(), "rule__ProcDeclaration__ProcCallAssignment_4_3_1");
					put(grammarAccess.getProcDeclarationAccess().getArgsAssignment_5_2(), "rule__ProcDeclaration__ArgsAssignment_5_2");
					put(grammarAccess.getProcDeclarationAccess().getArgsAssignment_5_3_1(), "rule__ProcDeclaration__ArgsAssignment_5_3_1");
					put(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_6_2(), "rule__ProcDeclaration__InstructionsAssignment_6_2");
					put(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_6_3_1(), "rule__ProcDeclaration__InstructionsAssignment_6_3_1");
					put(grammarAccess.getBlockAccess().getInstructionsAssignment_3_2(), "rule__Block__InstructionsAssignment_3_2");
					put(grammarAccess.getBlockAccess().getInstructionsAssignment_3_3_1(), "rule__Block__InstructionsAssignment_3_3_1");
					put(grammarAccess.getIfAccess().getConditionAssignment_2_1(), "rule__If__ConditionAssignment_2_1");
					put(grammarAccess.getIfAccess().getThenPartAssignment_4(), "rule__If__ThenPartAssignment_4");
					put(grammarAccess.getIfAccess().getElsePartAssignment_5_1(), "rule__If__ElsePartAssignment_5_1");
					put(grammarAccess.getControlStructure_ImplAccess().getConditionAssignment_3_1(), "rule__ControlStructure_Impl__ConditionAssignment_3_1");
					put(grammarAccess.getRepeatAccess().getConditionAssignment_2_1(), "rule__Repeat__ConditionAssignment_2_1");
					put(grammarAccess.getRepeatAccess().getBlockAssignment_4(), "rule__Repeat__BlockAssignment_4");
					put(grammarAccess.getWhileAccess().getConditionAssignment_2_1(), "rule__While__ConditionAssignment_2_1");
					put(grammarAccess.getWhileAccess().getBlockAssignment_4(), "rule__While__BlockAssignment_4");
					put(grammarAccess.getParameterCallAccess().getParameterAssignment_3(), "rule__ParameterCall__ParameterAssignment_3");
					put(grammarAccess.getPlusAccess().getLhsAssignment_3(), "rule__Plus__LhsAssignment_3");
					put(grammarAccess.getPlusAccess().getRhsAssignment_5(), "rule__Plus__RhsAssignment_5");
					put(grammarAccess.getMinusAccess().getLhsAssignment_3(), "rule__Minus__LhsAssignment_3");
					put(grammarAccess.getMinusAccess().getRhsAssignment_5(), "rule__Minus__RhsAssignment_5");
					put(grammarAccess.getMultAccess().getLhsAssignment_3(), "rule__Mult__LhsAssignment_3");
					put(grammarAccess.getMultAccess().getRhsAssignment_5(), "rule__Mult__RhsAssignment_5");
					put(grammarAccess.getDivAccess().getLhsAssignment_3(), "rule__Div__LhsAssignment_3");
					put(grammarAccess.getDivAccess().getRhsAssignment_5(), "rule__Div__RhsAssignment_5");
					put(grammarAccess.getEqualsAccess().getLhsAssignment_3(), "rule__Equals__LhsAssignment_3");
					put(grammarAccess.getEqualsAccess().getRhsAssignment_5(), "rule__Equals__RhsAssignment_5");
					put(grammarAccess.getGreaterAccess().getLhsAssignment_3(), "rule__Greater__LhsAssignment_3");
					put(grammarAccess.getGreaterAccess().getRhsAssignment_5(), "rule__Greater__RhsAssignment_5");
					put(grammarAccess.getLowerAccess().getLhsAssignment_3(), "rule__Lower__LhsAssignment_3");
					put(grammarAccess.getLowerAccess().getRhsAssignment_5(), "rule__Lower__RhsAssignment_5");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.kermeta.language.sample.logo.ui.contentassist.antlr.internal.InternalLogoTextualSyntaxParser typedParser = (org.kermeta.language.sample.logo.ui.contentassist.antlr.internal.InternalLogoTextualSyntaxParser) parser;
			typedParser.entryRuleLogoProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LogoTextualSyntaxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LogoTextualSyntaxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
