using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::emfpersistence::*

using kmLogo::ASM::LogoProgram

package org::kermeta::language::sample::logo::checkerPackage {
	class MainClass {
	
		@main ""
		operation check() : Void is do 
			checkProgram("carre.logoasm")
			checkProgram("carre_faulty1.logoasm")
			checkProgram("carre_faulty2.logoasm")
		end
		
		operation checkProgram(prg : String) is do
			do
				var program : LogoProgram init 
					loadProgram("platform:/resource/org.kermeta.language.sample.logo.checker/test/" + prg)
				program.checkAllInvariants()
				stdio.writeln("Program " + prg + " seems ok. ")
			rescue (e : kermeta::exceptions::Exception)
				stdio.writeln("Error in program "+ prg +" : " + e.message)
			end
		end
	
		operation loadProgram(ecoreFile : String) : LogoProgram is do             
			var repository : ResourceSet init ResourceSet.new
			var resource : Resource init repository.createResource(ecoreFile, "platform:/resource/org.kermeta.kmlogo.logoasm.model/model/ASMLogo.ecore")
			resource.load(void)      
			result ?= resource.getContents().one
		end
	}
	
}