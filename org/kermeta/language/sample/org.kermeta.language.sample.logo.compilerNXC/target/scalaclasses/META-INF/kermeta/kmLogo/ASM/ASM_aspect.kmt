using kermeta::standard::*
using kermeta::io::StdIO => stdio

using org::kermeta::language::sample::logo::compilerNXC::NXCCompiler

package kmLogo {

	package ASM {

		aspect abstract class Instruction {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "// NOT IMPLEMENTED"
			end

		}

		aspect abstract class Primitive {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := void
			end

		}

		aspect class Back {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "forward(-(" + steps.compileToNXC(context) + "));"
			end

		}

		aspect class Forward {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "forward(" + steps.compileToNXC(context) + ");"
			end

		}

		aspect class Left {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "turn(" + angle.compileToNXC(context) + ");"
			end

		}

		aspect class Right {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "turn(-(" + angle.compileToNXC(context) + "));"
			end

		}

		aspect class PenDown {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "penDown();"
			end

		}

		aspect class PenUp {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "penUp();"
			end

		}

		aspect class Clear {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "// RESET NOT IMPLEMENTED"
			end

		}

		aspect abstract class Expression {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := void
			end

		}

		aspect abstract class BinaryExp {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := void
			end

		}

		aspect class Constant {

			operation compileToNXC (context  : NXCCompiler) : String is do
				if integerValue >= 0 then
					result := integerValue.toString
				else 
					result := "(" + integerValue.toString + ")"
				end
			end

		}

		aspect class ProcCall {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := declaration.name + "("
				from var i : Integer init 0
				until i >= actualArgs.size
				loop
					result.append(actualArgs.elementAt(i).compileToNXC(context))
					if i < actualArgs.size - 1 then 
						result.append(", ") 
					end
					i := i+1
				end
				result.append(");")
			end

		}

		aspect class ProcDeclaration {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "// Declaration of " + name + " function"
				var proc : String init "sub " + name + "("
				from var i : Integer init 0
				until i >= args.size
				loop
				proc.append("int " + args.elementAt(i).name)
				if i < args.size - 1 then proc.append(", ") end
				i := i + 1
				end
				proc.append(")\n")
				proc.append("{\n")
				var depth : Integer init context.depth
				context.depth := 0
				instructions.each{i | 
					proc.append(i.compileToNXC(context))}
				proc.append("}\n")
				context.subs.add(proc)
				context.depth := depth
			end

		}

		aspect class Block {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := context.prefix + "{\n"
				context.incDepth
				instructions.each{ instruction  | 
					result.append(context.prefix + instruction.compileToNXC(context) + "\n")}
				context.decDepth
				result.append(context.prefix + "}")
			end

		}

		aspect class If {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "if (" + condition.compileToNXC(context) + ")\n"
				result.append(thenPart.compileToNXC(context))
				if not elsePart.isVoid() then
					result.append("\n" + context.prefix + "else\n")
					result.append(elsePart.compileToNXC(context))
				end
			end

		}

		aspect class ControlStructure {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := void
			end

		}

		aspect class Repeat {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := "repeat (" + condition.compileToNXC(context) + ")\n"
				result.append(block.compileToNXC(context))
			end

		}

		aspect class While {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := context.prefix + "while (" + condition.compileToNXC(context) + ")\n"
				result.append(block.compileToNXC(context))
			end

		}

		aspect class Parameter {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := void
			end

		}

		aspect class ParameterCall {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := parameter.name
			end

		}

		aspect class Plus {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " + " + rhs.compileToNXC(context)
			end

		}

		aspect class Minus {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " - " + rhs.compileToNXC(context)
			end

		}

		aspect class Mult {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " * " + rhs.compileToNXC(context)
			end

		}

		aspect class Div {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " / " + rhs.compileToNXC(context)
			end

		}

		aspect class Equals {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " == " + rhs.compileToNXC(context)
			end

		}

		aspect class Greater {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " > " + rhs.compileToNXC(context)
			end

		}

		aspect class Lower {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := lhs.compileToNXC(context) + " < " + rhs.compileToNXC(context)
			end

		}

		aspect class LogoProgram {

			operation compileToNXC (context  : NXCCompiler) : String is do
				result := context.prefix
				context.incDepth
				instructions.each{ instruction  | 
					result.append(context.prefix + instruction.compileToNXC(context) + "\n")}
				context.decDepth
				result.append(context.prefix)
			end

		}

	}
}
