using kermeta::standard::*
using kermeta::io::StdIO => stdio
using org::kermeta::language::sample::logo::interpreter::Math

package kmLogo { 
	package VM {
		aspect class Turtle
		{
			attribute math : Math 
			//reference moveListener : kmLogo::listener::TurtleMoveListener[0..*]
	
			operation reset() : Void is do
				math := Math.new
				position := Point.new
				position.x := 0.doubleValue
				position.y := 0.doubleValue
				heading := 0
				penUp := true
				drawings.clear
			end
					
			/*operation setPenUp(b : Boolean) : Void is do
				penUp := b
			end*/
			
			operation rotate(angle : Integer)  : Void is do
				heading := (heading + angle).mod(360)
				//moveListener.each{l | l.turtleHasRotated() }
			end
		
			operation move(dx : Double, dy : Double)  : Void is do
				var newPos : Point init position.getDelta(dx,dy)
				var trace : Segment 
				if penUp then
					stdio.writeln("Turtle move to "+ newPos.toString)
				else
					stdio.writeln("Turtle trace to "+ newPos.toString)
					trace := Segment.new
					trace.make(position,newPos)
					drawings.add(trace)
				end
				position := newPos
				//moveListener.each{l | l.turtleHasMoved(trace) }
			end
				
			operation forward(steps : Integer) : Void is do
			    var radian : Double init math.toRadians(heading.doubleValue) 
				move(scale(steps,math.sin(radian)), scale(steps,math.cos(radian)))
			end
		   
		   /**
			* scale the "steps" by factor
			*/
			operation scale(steps : Integer, factor : Double) : Double is do
				result := (steps.doubleValue * factor).asType(Double)
			end
		}
		
		aspect class Point
		{
			operation getDelta(dx : Double, dy : Double) : Point is do
				result := Point.new
				result.x := x + dx
				result.y := y + dy			
			end
			method toString() : String is do
				result := "[" + x.intValue.toString + "," + y.intValue.toString + "]"
			end
		}
		
		aspect class Segment
		{
			operation make (orig : Point, dest : Point) : Void is do
				origin := orig
				destination := dest
			end
		}
	}
}