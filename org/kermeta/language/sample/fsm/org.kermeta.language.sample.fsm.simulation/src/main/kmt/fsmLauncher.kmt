/* $Id: fsmLauncher.kmt,v 1.4 2007-12-06 23:22:55 bmorin Exp $
 * Project    : fr.irisa.triskell.kermeta.samples.fsm.demoAspect
 * File       : fsmLauncher.kmt
 * License    : EPL
 * Copyright  : IRISA / INRIA / Universite de Rennes 1
 * -------------------------------------------------------------------
 * Creation date : 27 juil. 2005
 * Modified By : 
 *        Waqas Ahmed Saeed <wahmedsa@irisa.fr>
 *        Cyril Faucher <cfaucher@irisa.fr>
 * Description : 
 *       Launching Kermeta File for Finite State Machine Sample
 *		 Use mainloadFSM method as entering point for loading XMI based file  
 */

using fsm::*
using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::emfpersistence::*
using kermeta::exceptions::*

package fsm{
	
	class Main
	{
		@main ""
		operation mainloadFSM() : Void is do
			var theFSM : FSM := AutomatonHelper.new.ask_emfmodel("Enter the EMF model of the automaton to run: (ex: helloWorld.fsm)")
			
			printFSM(theFSM)
			theFSM.run()
		end
		
		 /*
		 * Load the FSM model from the xmi file sample1.fsm
		 * It's an instance of the FSM metamodel
		 * "../models/sample1.fsm"
		 */
		operation loadfsm(input_automaton : String) : FSM is do
			var rep : ResourceSet init ResourceSet.new
			result := AutomatonHelper.new.loadEMFAutomaton(rep, input_automaton, "http://www.kermeta.org/fsm")
	        
	        // Uncomment to check the invariant properties : WFR
	        // To check all contained elements by "result"
	        //result.checkAllInvariants
	        // To check only the states that are contained in "result"
	        //checkWFR(result)
		end

		/**
		 * For all states, we check the Well-Formedness rules
		 */
		operation checkWFR(theFSM : FSM) is do
			stdio.writeln("Check WFR : start")
			theFSM.ownedState.each{ s | 
				do
					// Call the invariant verification
					s.checkInvariants
					rescue (err : ConstraintViolatedInv)
			            stdio.writeln(err.toString)
			            stdio.write(err.message)
			            stdio.writeln(" on " + s.name)
			    end
			}
			stdio.writeln("Check WFR : end")
		end
		
		
		/**
		 * Print the FSM on the standard output
		 */
		operation printFSM(fsm : FSM) is do
			fsm.ownedState.each 
			{ s | 
				stdio.writeln("State : " + s.name)
				s.outgoingTransition.each { t | 
					var outputText : String
					if( t.output != void and t.output != "" )
						then outputText := t.output
						else outputText := "NC"
					end
					stdio.writeln("  Transition : " + t.source.name + "-(" + t.input + "/" + outputText + ")->" + t.target.name)
				}
			}
		end
	
	}
}


