using fsm::*
using kermeta::standard::*
using kermeta::emfpersistence::*
using kermeta::io::StdIO => stdio
using kermeta::exceptions::*

package fsm{
	class InvariantChecker
	{
		@main ""
	    operation main() : Void is do 
	        var rep : ResourceSet init ResourceSet.new
	        var theFSM : FSM := AutomatonHelper.new.ask_emfmodel("Enter the EMF model of the automaton to check: (ex: helloWorld.fsm)")
	        
	        // To check all contained elements by "theFSM"
	        stdio.writeln("> call of the checkAllInvariants method")
	        theFSM.checkAllInvariants
	        // To check only the states that are contained in "theFSM"
	        stdio.writeln("> call of the checkInvariants method")
	        checkWFR(theFSM)
		end
		
		/**
		 * For all states, we check the Well-Formedness rules
		 */
		operation checkWFR(theFSM : FSM) is do
			stdio.writeln("Check WFR : start")
			theFSM.ownedState.each{ s | 
				do
					// Call the invariant verification
					s.checkInvariants
					rescue (err : ConstraintViolatedInv)
			            stdio.writeln(err.toString)
			            stdio.write(err.message)
			            stdio.writeln(" on " + s.name)
			    end
			}
			stdio.writeln("Check WFR : end")
		end
	}
}