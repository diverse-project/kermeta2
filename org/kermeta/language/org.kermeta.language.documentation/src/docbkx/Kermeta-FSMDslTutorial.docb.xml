<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<book lang="en-US">
	<bookinfo>
		<mediaobject>
			<imageobject>
				<imagedata fileref="Kermeta-Manual_figures/KermetaLogo.png"
					format="PNG" />
			</imageobject>
		</mediaobject>
		<title>Use case of Kermeta 2</title>
		<subtitle>Finite state machine sample</subtitle>

		<pubdate>Build
			: &version; &buildNumber;
		</pubdate>
		<date>$Date:: $</date>
		
		<author>
			<firstname>Fabien</firstname>
			<surname>Coulon</surname>
		</author>

		<keywordset>
			<keyword>Kermeta</keyword>
			<keyword>metamodeling</keyword>
			<keyword>language</keyword>
			<keyword>dsl</keyword>
			<keyword>FSM</keyword>
			<keyword>sample</keyword>
		</keywordset>

		<abstract>
			<para>In this tutorial we will show how Kermeta 2 can help you to add sematic on your own model, how to transform it to another model and how to build a basic interpreter.</para>
		</abstract>

		<publisher>
			<publishername>INRIA</publishername>

			<address>
				<state>France</state>
				<otheraddr>
					<ulink url="http://www.inria.fr">http://www.inria.fr</ulink>
				</otheraddr>
			</address>
		</publisher>
	</bookinfo>

	<preface id="preface.link">
		<title id="preface.title.link">
			Presentation
			<phrase id="preface"></phrase>
		</title>
		<para>Kermeta action language is a DSL designed to manipulate
			models. However it
			isn't a general purpose language and thus doesn't
			directly offer all
			the libraries to build for example an application 
			with a
			sophisticated GUI.
		</para>

		<important>
			<title>Prerequisite</title>
			<para>Preconditions so that the tutorials could run correctly</para>
			<itemizedlist>
				<listitem>
					<para>Use an Eclipse Modeling Tools based on a Juno version</para>
				</listitem>
				<listitem>
					<para>On Eclipse IDE should be installed Kermeta language plug-in
						based upon a Release version
					</para>
				</listitem>
				<listitem>
					<para>On Eclipse IDE should be installed Maven plug-in</para>
				</listitem>
				<listitem>
					<para>Eclipse must be started using a JDK (not a JRE). This must be
						specified in the eclipse.ini file using the -vm option.
					</para>
				</listitem>
			</itemizedlist>
			<para>Alternatively to the first 3 points, you can use the predefined
				eclipse package with all kermeta tools preinstalled.
			</para>
		</important>
		<important>
			<para>This tutorial serie explain various procedure to acheive some
				goal, however, the attentive reader must know that even if the
				presented procedure work, you may acheive similar results using
				alternative or slightly modifying the proposed procedure because you
				ma decide to use another tool or use it differently. Roughly,
				all
				this tutorial serie is actually about :
			</para>
			<itemizedlist>
				<listitem>
					<para>Java compilation, and the support of java compatible language
						like Scala and groovy. (special care to the compilation classpath)
					</para>
				</listitem>
				<listitem>
					<para>OSGI/Eclipse packaging and deployment, which requires to take
						care to the jar content and to the runtime classpath (which can be
						different from the compilation classpath !)
					</para>
				</listitem>
			</itemizedlist>
			<para>In all cases, there are various ways to compile, package and
				deploy, either using Eclipse builders or using maven.
			</para>
			<para>This tutorial will try to give suggestions and explain the
				underlying process but explaining maven, Eclipse, java, OSGI isn't
				in the scope of this document. The user must be ready to find and
				read the appropriate documentations.
			</para>
		</important>
	</preface>
	
	<chapter>
		<title>Introduction</title>
		To illustrate the use of Kermeta 2, we will study the case of a Finite state machine(FSM).
		At the end of this tutorial you will know how to use Kermeta 2 for :
		<para> 
			<itemizedlist>
				<listitem>
					<para>Import a model in Kermeta 2</para>
				</listitem>
				<listitem>
					<para>Adding constaints on your model</para>
				</listitem>
				<listitem>
					<para>Browsing your model</para>
				</listitem>
				<listitem>
					<para>Adding behavior on your model</para>
				</listitem>
				<listitem>
					<para>Make a running application based on your model</para>
				</listitem>
			</itemizedlist>
		</para>
	</chapter>
	
	<chapter>
		<title>Define the FSM metamodel</title>
		<para> An IO/state machine  is composed with two kind of elements: states and transitions which linking them. The current state of the machine move between states by following transitions. A transition is followed if the input is read. And if transition is followed the ouput is writed</para>
		<para>
			This example recognizes the "hello!" motif and produces the "world!" motif. Here, we present this finite-state machine in a specific graphical syntax where states are squares and transitions are arrows between squares. Input and outputs are present above transitions. Here, "h/w" says that we consume an "h" to produce a "w"
			<mediaobject>
				<imageobject>
					<imagedata
						fileref="Kermeta-FSMDslTutorial_figures/helloWorldFSM.png"
						format="PNG" />
				</imageobject>
			</mediaobject>
		</para>
	</chapter>
	
	<chapter>
		<title>Models &amp; Metamodel</title>
		<para> TODO: explain how to desgin the fsm model with emf tools </para>
		<para> In this section we will define the metamodel and make a simple editor to create some conforms models, which will be the input of Kermeta 2 with using EMF technology. You can do this works with Kermeta but this is not the purpose of this tutorial, here we want show how the 2 technologies work together</para>
		
		<section id="metamodel">
			<title>Creation of the metamodel</title>
			<para>
				The first step is to make the .ecore file, which will describe your metamodel.
				Create a new project in File -> New -> Project and in "Eclipse Modeling Framework" select "Empty EMF Project". 
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/1_empty_project.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Name your project "model".
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/2_name_empty_project.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				The project appear now in your workspace.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/3_empty_project_created.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Then create the .ecore file with a right clic on your project and select New -> Other. Choose "Ecore Model" in "Eclipse Modeling Framework".
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/4_add_ecore.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Name your file fsm.ecore and put it in the "model" folder of your project.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/5_name_ecore.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Select "EPackage" and clic on finish.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/6_type_ecore.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Your .ecore is created, we must fill it now !
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/7_project_with_ecore.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Open fsm.ecore with the "Sample Ecore Model Editor". It is the default Eclipse editor for .ecore file.
				Then do a right clic on the fsm package in the model and in "New Child" select "EClass" to create the three mains elements of our model: FSM, State and Transition.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/8_ecore_classes.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				We will creates attributes and references for the State. Reference types are related to EClass whereas EAttributes are simple types.
				Right clic on State, New Child and clic on EAttribute. 
				Open the Properties view in "Window" -> "Show view" -> "Other" and "Properties" in "General" folder. This view is usefull to edit attributes of model elements. Set "name" as Name of the EAttibute created.
				Create three other EReference for the State and name them "outgoingTransition", "incomingTransition" and "owningFSM". You can change the cardinality with "Lower" and "Upper Bound", where -1 means infinity. 
				Set the EType for each one. We will also set EOpposite values after we have defined attributes of others Classes.
				I let you to finish yourself the fsm.ecore according to the "Define the FSM metamodel" section. ;)
				You can get the solution in the subsection "Getting the solution: the FSM sample" of the last chapter of this tutorial.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/9_ecore_attributes.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Now we suppose your fsm.ecore looks like mine in the screenshot.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/10_ecore_full.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="genmodel">
			<title>Creation of the editor</title>
			<para>
				We will now create the .genmodel file. This is a code generator based on an .ecore file. To be simple: it creates a Java implementation of your metamodel and can generate a simple editor with creating instance of your metamodel.
				Right clic on your project and select New -> Other, and "EMF Generator Model" in "Eclipse Modeling Framework".
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/11_create_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Name it "fsm.genmodel".
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/12_name_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Base on Ecore model.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/13_type_import_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Select "fsm.ecore" from your workspace.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/14_import_ecore_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Then clic on Finish.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/15_package_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Once you have the genmodel, in the Properties view go to Edit section of "ownedState" of FSM to allow creation of Children in the editor.
				Do the same operation for "outgoingTransition" of State.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/16_edit_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Right clic on the root node of the genmodel and select Generate All. This will generate Java classes implementation of the .ecore in the "src" folder of your project.
				The two projects generated "model.edit" and "model.editor" will be used as Eclipse plugin and are the implementation of your model editor.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/17_generate_all_genmodel.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Right clic on "model.editor" and Run as -> Eclipse Application. 
				Create a new empty project in your new instance of Eclipse (where your editor is running as a pluging).
				Then go to File -> New -> Other -> Example EMF Model Creation Wizard and select Fsm Model.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/18_create_model_editor.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Give a name to your model. (note: the extension of your model file is the name of your metamodel)
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/19_name_model_editor.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Set "FSM" as a type of object model.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/20_type_model_editor.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
				Then you can add elements in the model with right clic -> New Child. Your editor will propose you object of the right allowing type.
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="Kermeta-FSMDslTutorial_figures/21_edit_model.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
			</para>
			
			<para>Congratulation you have build a simple editor from your metamodel !</para>
		</section>
		<para>For more informations about EMF modeling go to "http://www.eclipse.org/documentation/", chose your version of Eclipse and select EMF Developer Guide -> Tutorials</para>
	</chapter>
	
	<chapter>
		<title>Adding constraints on the model</title>
		<para> TODO: not yet working on K2 but explain the OCL-like feature and for what is it. Ex: not duplicated transitions allowed</para>
		<section id="Creation of the project">
			<title>Creation of the project</title>
		</section>
		<section>
			<title>Run configurations</title>
			<section>
				<title>An entry point for the program</title>
			</section>
			<section>
				<title>Execution without parameters</title>
			</section>
			<section>
				<title>Execution with parameter(s)</title>
			</section>
		</section>
	</chapter>
	
	<chapter>
		<title>Make the machine alive</title>
		<para> TODO: explain how to write the interpreter and what is it</para>
		<section id="Creation of the project">
			<title>Creation of the project</title>
			TODO
			Create a new Kermeta 2 project in File -> New -> Project -> Kermeta -> Kermeta project and name it "fsm.simulation". 
			The project is contains "project.kp" and "src/main/kmt/MainClass.kmt". "MainClass.kmt" define one method which print "Hello world!". The "project.kp" declare all the content of your project. Here it just says "MainClass.kmt" is a source file of your project, where the main method is and import the kermeta metamodel where are defined all objects of the language.
			Now we want to import our model. To do that we add a ressource delcaration at the top of the kp:
			resource fsm_model = "mvn:org.kermeta.language.sample.fsm/org.kermeta.language.sample.fsm.model/1.0.0-SNAPSHOT"
			Then we say to Kermeta this model is a part of our application by adding:
			import "${fsm_model.baseUri}/model/fsm.ecore" using EMFBytecode(fsm_model)
			Now right clic on your project.kp -> clean and build. Then in the target folder open "beforeCheckingforScopeRESOLVED.km". This is the final model generated by the Kermeta 2 compilator. It is a reflect of the assemblage defined in the "project.kp".
			You can see two metamodels: kermeta and your own. Open yours to see the FSM model was successfully imported. Congratulation! 
		</section>
		<section id="Adding behavior">
			<title>Adding behavior</title>
			<section id="Expercted behavior">
				<title>Expected behaviour for this tutorial</title>
			</section>
			<section id="Creation of the project">
				<title>Creation of the project</title>
			</section>
			<section id="Aspect behavior">
				<title>Structuration of this behavior with aspects</title>
			</section>
			<section id="Behavior algorithms">
				<title>Behavior algorithmsl</title>
			</section>
			<section id="Run the simulation">
				<title>Run the simulation</title>
			</section>
		</section>
	</chapter>
	
	<chapter>
		<title>Model transformation</title>
		<para> TODO </para>
		<section id="determinization">
			<title>Determinization</title>
			<para>TODO</para>
		</section>
		<section id="minimization">
			<title>Minimization</title>
			<para>Delete duplicated states</para>
		</section>
	</chapter>
	
	<chapter>
		<title>Overview</title>
		<para>TODO: this is the result of the tuto</para>
		<section>
			<title>What you get at the end</title>
		</section>
		<section>
			<title>Getting the solution: the FSM sample</title>
			<para>Kermeta 2 provides a set of examples to show his skills. Among them you can retrieve the FSM sample, which will install Kermeta 2 projects in your workspace. You will find into them, as a support of this tutorial, the working source code. To do this just go in File -> New -> Example and then select "Kermeta 2 FSM sample" in "Kermeta 2 samples"</para>
		</section>
	</chapter>

</book>
			