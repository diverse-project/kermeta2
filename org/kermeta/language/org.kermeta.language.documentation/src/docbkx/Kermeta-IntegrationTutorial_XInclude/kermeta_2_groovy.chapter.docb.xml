<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter_kermeta_2_groovy.link">
	<title id="chapter_kermeta_2_groovy.title.link">Calling Groovy from Kermeta
	</title>
	<para>Kermeta 2 provides a wrapper for Groovy. This allows to call
		this dynamic language directly from Kermeta.
	</para>
	<para>TODO illustrate that on a small sample.
	</para>
	<section>
		<title>Presentation/key points</title>
		<para>This tutorial will detail the following points: </para>
		<orderedlist numeration="arabic">
			<listitem>
				<para>create a kermeta project</para>
				<para>configure the project to use the groovy wrapper</para>
			</listitem>
			<listitem>
				<para>add kermeta code that will call a groovy expression that
					uses some kermeta elements.
				</para>
			</listitem>
			<listitem>
				<para>add a sample ecore model in the project</para>
				<para>add some kermeta code that will use groovy to navigate and
					call operations in the model.
				</para>
				<para>Add kermeta code that extract the groovy expression from the
					model itself before applying it.
				</para>
			</listitem>
			<listitem>
				<para>compile and run the kermeta application</para>
			</listitem>
		</orderedlist>
	</section>
	<section>
		<title>Create and configure a kermeta project to use Groovy</title>
		<para>Create a new Kermeta project with the wizard.(see previous
			tutorials)
		</para>
		<para>In the project.kp, add the following resources</para>
		<programlisting language="kp">resource groovy = "platform:/plugin/org.kermeta.extra.groovyembedded" alternative "mvn:org.kermeta.extra/groovyembedded/2.0.99-SNAPSHOT"
resource groovy_all = "mvn:org.codehaus.groovy/groovy-all/2.1.2"
				</programlisting>
		<para>and the following importProject</para>
		<programlisting language="kp">importProject groovy 
importProject groovy_all
				</programlisting>
		<para>This indicates that the wrapper and its bytecode
			dependencies will be available when compiling and when launching as a standalone
			kermeta application.
		</para>
	</section>
	<section>
		<title>Calling some simple groovy expression</title>
		<para>Somewhere in your kermeta code you can call a groovy
			expression stored in a string. For example:
		</para>
		<programlisting language="kermeta">var args :kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object&gt; init 
	kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object&gt;.new
args.put("self", self)
args.put("anotherParam", "someString")
var res1 :kermeta::standard::Object init 
	extern org::kermeta::extra::groovyembedded::GroovyEmbedder.run("println 'Hello GroovyWorld! ' +self' '+anotherParam; return 'foo';", args)
stdio.writeln(res1.toString)</programlisting>
		<para>
			Where
			<literal>args</literal>
			can store object coming from Kermeta and be accessed by the groovy
			script. In the above sample,
			<literal>self</literal>
			is mapped to a Groovy argument named self, and some string is
			mapped to a Groovy argument named anotherParam. Both are printed on
			the standard output. The return can be used to send back data to
			the Kermeta side in
			<literal>res1</literal>
			. Another way to send back data would be to simply
			send an object in
			an argument and change its content from Groovy.
		</para>
	</section>
	<section>
		<title>Calling groovy expression on ecore model</title>
		<para>TODO</para>
	</section>
	<section>
		<title>Compile and run</title>
		<para>TODO</para>
	</section>
</chapter>