<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<book lang="en-US">
	<bookinfo>
		<mediaobject>
			<imageobject>
				<imagedata fileref="Kermeta-Manual_figures/KermetaLogo.png"
					format="PNG" />
			</imageobject>
		</mediaobject>
		<title>Kermeta integration tutorials</title>
		<subtitle>How to integrate Kermeta programs with Java programs
		</subtitle>

		<pubdate>Build
			: &version; &buildNumber;
		</pubdate>
		<date>$Date:: $</date>

		<author>
			<firstname>Vincent</firstname>
			<surname>Fontanella</surname>
		</author>
		<author>
			<firstname>Didier</firstname>
			<surname>Vojtisek</surname>
		</author>

		<keywordset>
			<keyword>Kermeta</keyword>
			<keyword>metamodeling</keyword>
			<keyword>language</keyword>
		</keywordset>

		<abstract>
			<para>These tutorials serie demonstrates how to use the kermeta
				workbench in various scenarii that integrate kermeta programs with
				java programs.
			</para>
			<para>The first serie shows how to call kermeta code from java
				programs.
			</para>
			<para>The second serie shows how to call java compatible code from
				kermeta
				action language.
			</para>
		</abstract>

		<publisher>
			<publishername>INRIA</publishername>

			<address>
				<state>France</state>
				<otheraddr>
					<ulink url="http://www.inria.fr">http://www.inria.fr</ulink>
				</otheraddr>
			</address>
		</publisher>
	</bookinfo>

	<preface id="preface.link">
		<title id="preface.title.link">
			Presentation
			<phrase id="preface"></phrase>
		</title>
		<para>Kermeta action language is a DSL that allows to manipulate
			models. However it
			isn't a general purpose language and thus doesn't
			directly offer all
			the libraries to build an application for example
			with a
			sophisticated GUI.
		</para>
		<para>This serie of tutorials is about integrating Kermeta 2 code with
			its environment
		</para>

		<important>
			<title>Prerequisite</title>
			<para>Preconditions so that the tutorials could run correctly</para>
			<itemizedlist>
				<listitem>
					<para>Use an Eclipse Modeling Tools based on a Juno version</para>
				</listitem>
				<listitem>
					<para>On Eclipse IDE should be installed Kermeta language plug-in
						based upon a Release version
					</para>
				</listitem>
				<listitem>
					<para>On Eclipse IDE should be installed Maven plug-in</para>
				</listitem>
				<listitem>
					<para>Eclipse must be started using a JDK (not a JRE). This must be
						specified in the eclipse.ini file using the -vm option.
					</para>
				</listitem>
			</itemizedlist>
			<para>Alternatively to the first 3 points, you can use the predefined
				eclipse package with all kermeta tools preinstalled.
			</para>
		</important>
		<important>
			<para>This tutorial serie explain various procedure to acheive some
				goal, however, the attentive reader must know that even if the
				presented procedure work, you may acheive similar results using
				alternative or slightly modifying the proposed procedure because you
				ma decide to use another tool or use it differently. Roughly,
				all
				this tutorial serie is actually about :
			</para>
			<itemizedlist>
				<listitem>
					<para>Java compilation, and the support of java compatible language
						like Scala and groovy. (special care to the compilation classpath)
					</para>
				</listitem>
				<listitem>
					<para>OSGI/Eclipse packaging and deployment, which requires to take
						care to the jar content and to the runtime classpath (which can be
						different from the compilation classpath !)
					</para>
				</listitem>
			</itemizedlist>
			<para>In all cases, there are various ways to compile, package and
				deploy, either using Eclipse builders or using maven.
			</para>
			<para>This tutorial will try to give suggestions and explain the
				underlying process but explaining maven, Eclipse, java, OSGI isn't
				in the scope of this document. The user must be ready to find and
				read the appropriate documentations.
			</para>
		</important>
	</preface>

	<part id="part_java_2_kermeta.link">
		<title>Calling Kermeta code from a Java program</title>
		<partintro>
			<para>There are various ways to call Kermeta code from java programs.
				The details changes due to the actual deployment of the final code,
				this part present various scenarii that acheive that. Just pick the
				one which is most adpated to your architecture and deployment
				strategy.
			</para>
		</partintro>
		<chapter id="chapter_standalone_java_2_kermeta.link">
			<title id="chapter_standalone_java_2_kermeta.title.link">Calling Kermeta code from a standalone Java program
			</title>


			<para>This tutorial aims to show how to call kermeta code from a
				standalone Java program.
			</para>


			<section id="sec_standalone_java_2_kermeta_presentation.link">
				<title id="sec_standalone_java_2_kermeta_presentation.title.link">Presentation</title>
				<para> We are presenting this tutorial in 6 steps :</para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>Generate a new Kermeta project "HelloWorldKmt"</para>
					</listitem>
					<listitem>
						<para>Add a new operation which returns a string "hello world from
							a
							Kermeta project!!!"
						</para>
					</listitem>
					<listitem>
						<para>Generate a Jar file of the Kermeta project (using a
							simplified pom.xml)
						</para>
					</listitem>
					<listitem>
						<para>Create a new Java project</para>
					</listitem>
					<listitem>
						<para>Call the Kermeta API from to the java project</para>
					</listitem>
					<listitem>
						<para>Execute as a java application</para>
					</listitem>
				</orderedlist>
			</section>

			<section>
				<title>Generate a new Kermeta project "HelloWorldKmt"</title>
				<para>We are using the new project Wizard which creates a new
					kermeta
					project "HelloWorldKmt" automatically.
				</para>
				<para></para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>Inside eclipse context menu, select : File -> New ->
							Project...
						</para>
					</listitem>

					<listitem>
						<para>Select "Kermeta project" and Click on "Next" Button</para>
					</listitem>

					<listitem>
						<para>Wizard "New Project Kermeta" has just opened</para>
					</listitem>
				</orderedlist>
				<figure id="reftutoillustration1">
					<title>Wizard selection to access of a new project kermeta</title>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="Kermeta-IntegrationTutorial_figures/KermetaNewProject.png"
								format="PNG" />
						</imageobject>
					</mediaobject>
				</figure>

				<orderedlist continuation="continues">

					<listitem>
						<para>Replace project name by "HelloWorldKmt" and Click on
							"Finish" Button
						</para>
					</listitem>

				</orderedlist>

				<figure id="reftutoillustration2">
					<title>Wizard to generate a new project kermeta</title>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="Kermeta-IntegrationTutorial_figures/KermetaNewProjectWizard.png"
								format="PNG" />
						</imageobject>
					</mediaobject>
				</figure>
			</section>

			<section>
				<title>Add a new operation</title>
				<para>We are adding a new operation of the HelloWorld project,
					this
					operation should return a string : "Hello world from a Kermeta
					project!!!"
				</para>
				<para></para>
				<orderedlist>
					<listitem>
						<para>In the new kermeta project, open file : "MainClass.kmt"
						</para>
					</listitem>

					<listitem>
						<para>Add in class MainClass the following program listing :
						</para>
					</listitem>
				</orderedlist>

				<programlisting language="kermeta">operation helloWorld() : String is do
	result := "Hello world from a Kermeta project!!!"
end
			</programlisting>

				<orderedlist continuation="continues">
					<listitem>
						<para>Compile the project and check there is no error</para>
						<para>To Compile : right click on file "project.kp", select
							Kermeta2
							-> Clean and Build Kermeta Project
						</para>
					</listitem>
				</orderedlist>
			</section>

			<section>
				<title>Generate the Jar file</title>
				<para>We are creating the Jar file which should allow the
					interfacing
					of the Java project with a Kermeta API
				</para>
				<para></para>
				<orderedlist>
					<listitem>
						<para>Right click on file "project.kp", and select : Kermeta2 ->
							generate standalone jar exporter (via simple pom.xml)
						</para>
						<para>A new file called "pom.xml" has been generated at the root
							of the project
						</para>
					</listitem>

					<listitem>
						<para>Right click on file "pom.xml", select Run as -> Maven
							build...
						</para>
					</listitem>

					<listitem>
						<para>A window is openned, in field "Goals:", put : "package" and
							then press button "run"
						</para>
					</listitem>
				</orderedlist>

				<figure id="reftutoillustration3">
					<title>Wizard to configure a pom running</title>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="Kermeta-IntegrationTutorial_figures/KermetaPomXmlPackage.png"
								format="PNG" />
						</imageobject>
					</mediaobject>
				</figure>
				<orderedlist continuation="continues">
					<listitem>
						<para>After have refreshed the project, In "target" folder check
							that a "helloworldkmt-0.0.1-SNAPSHOT.jar" has been created
						</para>
					</listitem>
				</orderedlist>
			</section>

			<section>
				<title>Generate a new java project</title>
				<para>This part consists to generate a new project java containing
					the jar file generated by the kermeta project before and its
					dependencies
				</para>
				<para></para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>Inside eclipse context menu, select : File -> New -> Java
							Project
						</para>
					</listitem>

					<listitem>
						<para>Wizard "New Java Project" has just opened</para>
					</listitem>

					<listitem>
						<para>in field "Project name:", enter "helloworld" and click on
							button "next"
						</para>
					</listitem>
				</orderedlist>

				<figure id="reftutoillustration4">
					<title>Wizard selection to access of a new project java</title>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="Kermeta-IntegrationTutorial_figures/JavaNewProject.png"
								format="PNG" />
						</imageobject>
					</mediaobject>
				</figure>

				<orderedlist continuation="continues">

					<listitem>
						<para>At the following window "Java Settings", select the tab
							"Libraries"
						</para>
					</listitem>

					<listitem>
						<para>Click on button "Add JARs..."</para>
						<para>Go to folder "helloworldKmt/target", select the jar file and
							then all jar file existing in the folder ""dependencies"
						</para>
					</listitem>

					<listitem>
						<para>you should obtain that below :</para>
					</listitem>

				</orderedlist>

				<figure id="reftutoillustration5">
					<title>Wizard to select libraries for the new project </title>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="Kermeta-IntegrationTutorial_figures/JavaNewProjectAddJar.png"
								format="PNG" />
						</imageobject>
					</mediaobject>
				</figure>
				<orderedlist continuation="continues">
					<listitem>
						<para>Click on button "Finish" and a new java project "helloworld"
							has been created in the workspace
						</para>
					</listitem>
				</orderedlist>
			</section>
			<section>
				<title>Called a kermeta API from to the project java</title>
				<para>This part consists to use the operation "helloWorld" defined
					in the project kermeta "helloworldkmt"
				</para>
				<para>to display the message transmitting by the API kermeta on the
					console
				</para>

				<orderedlist>
					<listitem>
						<para>Create a new java class containing the following listing
							programm
						</para>
					</listitem>
				</orderedlist>
				<programlisting language="java">public static void main(String[] args) {
	// TODO Auto-generated method stub
	helloworldkmt.mainPackage.MainClass mc = helloworldkmt.mainPackage.KerRichFactory.createMainClass();
	System.out.println("Essai avec un code kermeta distant");
	System.out.println(mc.helloWorld());	
}
			</programlisting>
				<orderedlist>
					<listitem>
						<para>Launch the java program</para>
						<para>Right click on the class containing main operation -> Run As
							-> Java Application
						</para>
					</listitem>
					<listitem>
						<para>Check the message "Hello world from a Kermeta project!!!"
							has been displayed on the console
						</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>

		<chapter id="chapter_standalone_java_2_kermeta_runner.link">
			<title id="chapter_standalone_java_2_kermeta_runner.title.link">Calling Kermeta main operations from a standalone
				Java program
			</title>

			<para>This tutorial shows how a standalone java program can call
				kermeta operations that have
				been declared as main entry point of the
				kermeta program thanks to
				the @main tag on operations.
			</para>
			<para>
			</para>
			<para>TODO explain and illustrate
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail the following points:</para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>Create a new Kermeta project</para>
					</listitem>
					<listitem>
						<para>Declare one or many operations as main operations using the
							@main tag
						</para>
					</listitem>
					<listitem>
						<para>Generate a basic jar file from the Kermeta project (using a
							simplified pom.xml)
						</para>
					</listitem>
					<listitem>
						<para>Create a new Java project that depends or embedds the jar of
							the kermeta project
						</para>
					</listitem>
					<listitem>
						<para>Call a Kermeta main operation using the corresponding Runner
							class from to the java project. These Runner classes will take
							care of the required initialization
						</para>
					</listitem>
					<listitem>
						<para>Execute the java program as a standalone application</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>

		<chapter id="chapter_java_2_kermeta_internal.link">
			<title id="chapter_java_2_kermeta_internal.title.link">Calling Kermeta internal code from a standalone Java
				program
			</title>

			<para>
				This tutorial aims to show how to directly call the richFoo and
				they
				operations without going through the @main operations. (usefull
				for
				example for fine grain UI integration with aspectized code).
				This is
				a variant of the tutorial
				<xref linkend="chapter_standalone_java_2_kermeta_runner.link" />
				but instead of relying on the generated runner classes, the user
				directly call the kermeta classes and operations. Then, depending on
				the origin of the classes, these classes can then be used either
				with a pure EMF point of view (ie. only using the EMF generated
				code) or
				might be manipulated as Kermeta (ie. using the aspect). This
				requires some understanding of the architecture of the generated
				code.
			</para>
			<para>
			</para>
			<para>TODO explain and illustrate
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail the following points:</para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>Create a new Kermeta project</para>
					</listitem>
					<listitem>
						<para>Declare some classes and some operations
						</para>
					</listitem>
					<listitem>
						<para>Generate a basic jar file from the Kermeta project (using a
							simplified pom.xml)
						</para>
					</listitem>
					<listitem>
						<para>Create a new Java project that depends or embedds the jar of
							the kermeta project
						</para>
					</listitem>
					<listitem>
						<para>In the java code, call the initialization of the kermeta
							code
						</para>
						<para> create some object from Kermeta classes and call operation
							on it it.
						</para>
					</listitem>
					<listitem>
						<para>In the Kermeta project, add an ecore model with some
							operation
						</para>
						<para>By aspect, add some behavior to the operation.
						</para>
					</listitem>
					<listitem>
						<para>In the java code, in pure EMF style, load a model conforming
							to this ecore.
						</para>
						<para>Call kermeta aspect operation by using exclusively the EMF
							api.
						</para>
					</listitem>
					<listitem>
						<para>Execute the java program as a standalone application</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter id="chapter_plugin_embedding_kermeta.link">
			<title id="chapter_plugin_embedding_kermeta.title.link">Embedding Kermeta code in an Eclipse plugin
			</title>

			<para>This tutorial aims to show how to embedd kermeta code in an
				Eclipse plugin. It also shows how to add some java code that is able
				to initialize and call the kermeta code in Eclipse context.
			</para>
			<para>Due to the requirement of OSGI deployment used by eclipse. The
				simple packaging strategy used in the previous chapter isn't enough.
				Some special care is required while packaging the code.
			</para>
			<para>TODO
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail two scenarii: </para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>the Kermeta code must be exposed to and used by several
							plugins
						</para>
					</listitem>
					<listitem>
						<para>the Kermeta code is used by a single plugin and can be
							privatly used by it
						</para>
					</listitem>
				</orderedlist>
				<orderedlist numeration="arabic">
					<title>Kermeta plugin needing to be exposed to several plugins
					</title>
					<listitem>
						<para>Create a new Kermeta project</para>
					</listitem>
					<listitem>
						<para>Configure the project and a pom.xml that is able to take
							into account both Kermeta code and some java code that is able to
							generate an OSGI compatible jar file
						</para>
						<para>The current recommanded way is to use maven-bundle-plugin.
						</para>
					</listitem>
					<listitem>
						<para>Add some java code that initialize the kermeta code and
							expose some operations of the kermeta code as a simplified API
						</para>
						<para>Add some java code that redirect kermeta StdIO messages to a
							dedicated eclipse console
						</para>
					</listitem>
					<listitem>
						Create a plugin project that will use it. (for example an user
						interface)
					</listitem>

					<listitem>
						<para>Deploy and execute the plugins in an eclipse runtime
							workbench
						</para>
						<para>Currently, the recommanded way to deploy the plugins is to
							use the OSGI provisionner
						</para>
						<para>tips about how debugging</para>
					</listitem>

				</orderedlist>
				<para>The tutorial also presents an alternative packaging that ease
					eclipse UI debugging: the UI plugin directly embedds the kermeta
					jar
				</para>
				<orderedlist numeration="arabic">
					<title>Kermeta code is used by a single plugin and is privatly used
						by it
					</title>
					<listitem>
						<para>Create an eclipse plugin</para>
					</listitem>
					<listitem>
						<para>Automate the copy of the jar produced from the kermeta
							project to an internal lib folder: with eclipse ant builder
						</para>
					</listitem>
					<listitem>
						<para>configure the plugin to use the jar</para>
						<para>update the dependencies according to the one computed from
							the kermeta jar
						</para>
					</listitem>
					<listitem>
						Create a plugin project that will use it. (for example an user
						interface)
					</listitem>

					<listitem>
						<para>Deploy and execute the plugins in an eclipse runtime
							workbench with the classic eclipse approeches
						</para>
					</listitem>
					<listitem>
						<para>Use of a tycho driven pom.xml to automate the build of such
							plugin (use copy-dependency to grab the kermeta jar as a
							precompile step)
						</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part id="part_kermeta_2_java.link">
		<title>Calling Java code from a Kermeta program</title>
		<partintro>
			<para>Kermeta offers several ways to call Java
				code from a kermeta
				program. This also works with any Java compatible
				code like Scala and
				groovy. This part presents various scenarii
				explaining how to achieve
				that.
			</para>
		</partintro>
		<chapter id="chapter_kermeta_extern.link">
			<title id="chapter_kermeta_extern.title.link">Calling java static operation with kermeta extern
			</title>
			<para>This tutorial show how to call some java static operations
				directly with the extern operator. It also shows how to package and
				declare the java code for being used by the extern operator.
			</para>
			<para>TODO
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail the following points: </para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>create a java project that proposes some static operations
						</para>
					</listitem>
					<listitem>
						<para>create a jar from this java project
						</para>
						<para>the current recommanded packaging method is to use maven
						</para>
					</listitem>
					<listitem>
						<para>create a kermeta project</para>
						<para>configure the project to use this java project and its
							eventual depdendencies
						</para>
						<para>call the static operation</para>
					</listitem>
					<listitem>
						<para>compile and run the kermeta application</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>

		<chapter id="chapter_kermeta_2_ecorejava.link">
			<title id="chapter_kermeta_2_ecorejava.title.link">Calling EMF Java operations from Kermeta
			</title>
			<para>Kermeta 2 is able to reuse the java code generated from an
				ecore model. Thus, if the generated code is customized through the
				GENERATED NOT annotations, this code will natively be used by
				kermeta. This provides a nice and elegant way to encapsualte java
				code in a model.
			</para>
			<para>TODO illustrate that on a small sample.
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail the following points: </para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>create an EMF project with an ecore model that proposes some
							operations
						</para>
						<para>generate the java code from the ecore model</para>
					</listitem>
					<listitem>
						<para>add some custom code in the model operations</para>
						<para>use "generated NOT" annotation to make sure the code cannot
							be overidden when regenerating the model
						</para>
					</listitem>
					<listitem>
						<para>create a jar from this java project
						</para>
						<para>the current recommanded packaging method is to use maven and
							tycho
						</para>
					</listitem>
					<listitem>
						<para>create a kermeta project</para>
						<para>configure the project to use this java project and its
							eventual depdendencies
						</para>
						<para>call the operations in the model</para>
					</listitem>
					<listitem>
						<para>compile and run the kermeta application</para>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter id="chapter_kermeta_2_groovy.link">
			<title id="chapter_kermeta_2_groovy.title.link">Calling Groovy from Kermeta
			</title>
			<para>Kermeta 2 provides a wrapper for Groovy. This allows to call
				this dynamic language directly from Kermeta.
			</para>
			<para>TODO illustrate that on a small sample.
			</para>
			<section>
				<title>Presentation/key points</title>
				<para>This tutorial will detail the following points: </para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>create a kermeta project</para>
						<para>configure the project to use the groovy wrapper</para>
					</listitem>
					<listitem>
						<para>add kermeta code that will call a groovy expression that
							uses some kermeta elements.
						</para>
					</listitem>
					<listitem>
						<para>add a sample ecore model in the project</para>
						<para>add some kermeta code that will use groovy to navigate and
							call operations in the model.
						</para>
						<para>Add kermeta code that extract the groovy expression from the
							model itself before applying it.
						</para>
					</listitem>
					<listitem>
						<para>compile and run the kermeta application</para>
					</listitem>
				</orderedlist>
			</section>
			<section>
				<title>Create and configure a kermeta project to use Groovy</title>
				<para>Create a new Kermeta project with the wizard.(see previous
					tutorials)
				</para>
				<para>In the project.kp, add the following resources</para>
				<programlisting language="kp">resource groovy = "platform:/plugin/org.kermeta.extra.groovyembedded" alternative "mvn:org.kermeta.extra/groovyembedded/2.0.99-SNAPSHOT"
resource groovy_all = "mvn:org.codehaus.groovy/groovy-all/2.1.2"
				</programlisting>
				<para>and the following importProject</para>
				<programlisting language="kp">importProject groovy 
importProject groovy_all
				</programlisting>
				<para>This indicates that the wrapper and its bytecode
					dependencies will be available when compiling and when launching as a standalone
					kermeta application.
				</para>
			</section>
			<section>
				<title>Calling some simple groovy expression</title>
				<para>Somewhere in your kermeta code you can call a groovy
					expression stored in a string. For example:
				</para>
				<programlisting language="kermeta">var args :kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object&gt; init 
	kermeta::utils::Hashtable&lt;kermeta::standard::String, kermeta::standard::Object&gt;.new
args.put("self", self)
args.put("anotherParam", "someString")
var res1 :kermeta::standard::Object init 
	extern org::kermeta::extra::groovyembedded::GroovyEmbedder.run("println 'Hello GroovyWorld! ' +self' '+anotherParam; return 'foo';", args)
stdio.writeln(res1.toString)</programlisting>
				<para>
					Where
					<literal>args</literal>
					can store object coming from Kermeta and be accessed by the groovy
					script. In the above sample,
					<literal>self</literal>
					is mapped to a Groovy argument named self, and some string is
					mapped to a Groovy argument named anotherParam. Both are printed on
					the standard output. The return can be used to send back data to
					the Kermeta side in
					<literal>res1</literal>
					. Another way to send back data would be to simply
					send an object in
					an argument and change its content from Groovy.
				</para>
			</section>
			<section>
				<title>Calling groovy expression on ecore model</title>
				<para>TODO</para>
			</section>
			<section>
				<title>Compile and run</title>
				<para>TODO</para>
			</section>
		</chapter>
		<chapter id="chapter_kermeta_2_compilerignorescala.link">
			<title id="chapter_kermeta_2_compilerignorescala.title.link">[advanced]Using compiler ignore directive to call
				hand written scala code
			</title>

			<para>TODO explain and illustrate that on a small sample.
			</para>
		</chapter>
	</part>

</book>
			