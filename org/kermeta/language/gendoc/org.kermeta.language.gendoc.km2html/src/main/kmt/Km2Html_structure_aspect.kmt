using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using org::kermeta::language::structure::*
using org::kermeta::language::behavior::*
using kermeta::emfpersistence::*
using kermeta::utils::*
using sortTool::*
  

package org::kermeta::language::structure{

aspect class TypeDefinition {
	
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		result := ""
		end
	/** Create classes html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
		result:=""
	end
	/** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName:String) : String is do
		result :=""
	end
}


aspect class ClassDefinition{
	/** Create html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
			var html : String init String.new	
			html := html + " <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>"
			result := html
    end
    
    /** generate html for contents page */
	operation generateClassesHtml (baseFolder:String, packageName : String) : String is do
	
	var path : String init baseFolder + "/" + self.name + ".html"
	path := path.replaceAll("::","_")
	var contents : StringBuffer init StringBuffer.new
	contents.append("<html><head><title>" + self.name  + "</title></head>\n")
	contents.append("<body BGCOLOR = white>")
		
	
	
	//Start of class data
	contents.append("<H2>\n")
	contents.append("<FONT SIZE=-1>\n")
	contents.append(packageName + "</FONT>\n")
	contents.append("<BR>\n")
	contents.append("Class ")
	
	
	
	if isAbstract == true then
		contents.append("Abstract ")
	end
	if isSingleton == true then
		contents.append("Singleton ")
	end
	
	contents.append(self.name)
	//this code fragment is to show the type parameters of the Classes
	if self.typeParameter.size != 0 then
	contents.append("[")
	self.typeParameter.indexedEach{e, eachContext| 
						if eachContext.isLast then
							contents.append(e.name)
						else
							contents.append(e.name + ", ")
						end
						}
						
	contents.append("]")
	end
	
	contents.append("<FONT SIZE = 4 color = blue> inherited from  </FONT>")
	self.superType.indexedEach{e, eachContext| 
								if eachContext.isLast then
									//contents.append(e.getClassname)
									contents.append(" <a href= " + e.getTypeDef + ".html target = Content> " + e.getClassname + "  </a>" + " <br>")
								else
									//contents.append(e.getClassname + ", ")
									contents.append(" <a href= " + e.getTypeDef + ".html target = Content> " + e.getClassname + ", " +  "</a>" + " <br>")
									
								end
								}
	contents.append("</H2>\n")
	//contents.append(self.superType.typeDefinition.name)
	contents.append("<HR>\n")
	
	//Diagram image
	var packPath : String := packageName.replaceAll("::","/")
	contents.append("<p><img src=\"./images/classes/" + packPath + "/" + self.name + ".png\"></p>")
	//contents.append("<p><img src=\"" + baseFolder + "images/classes/" + packPath + "/" + self.name + ".png\"></p>")
	
		//specification of classes, get tag properties
	
		
	self.kTag.each{tag | 
		if tag.name == "documentation" then
			contents.append("<p>"+tag.~value.replaceAll("\n","<br>") + "<p>\n")
		end
	}
	self.kTag.each{tag | 
		if (tag.name != "documentation" and tag.name != "traceability_text_reference") then
			contents.append("<b>@")
			contents.append(tag.name+"</b>")
			self.superType.each{e| contents.append(e.getname)}
			contents.append(" \"")
			contents.append(tag.~value)
			contents.append("\"<BR>\n")
		end
	}
	           
// Field Summury
	if ownedAttribute.size != 0 then
	contents.append("<p><A NAME=field_summary><!-- --></A>\n")
	contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
	contents.append("<TR BGCOLOR=#CCCCFF>\n")
	contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
	contents.append("<B>Property Summary</B></FONT></TH>\n")
	contents.append("</TR>\n")
	// list of properties
	var links : Sequence<Couple> := Sequence<Couple>.new
	ownedAttribute.each{oa |
				var c : Couple := Couple.new
				c.key := oa.name
				c.val := oa.createCodeHtml(self.name)
				links := links.append(c)
				}
	//Sort by alphabetical order
	if (links.size() != 0) then
		var sorter : SortTree := SortTree.new
		var sortedLinks : Sequence<String> := Sequence<String>.new
			sortedLinks := sorter.sort(links)
			sortedLinks.each{e | contents.append(e)}
	end
	//end of Field Summury
	contents.append("</TABLE></p>\n")
	end
	
	// Method Summury
	if ownedOperation.size != 0 then
		contents.append("<p><A NAME=method_summary><!-- --></A>\n")
		contents.append("<TABLE BORDER=1 WIDTH=100% CELLPADDING=3 CELLSPACING=0 SUMMARY=>\n")
		contents.append("<TR BGCOLOR=#CCCCFF>\n")
		contents.append("<TH ALIGN=left COLSPAN=2><FONT SIZE=+2>\n")
		contents.append("<B>Method Summary</B></FONT></TH>\n")
		contents.append("</TR>\n")
		// list of operations
		var links : Sequence<Couple> := Sequence<Couple>.new
		ownedOperation.each{oa |
					var c : Couple := Couple.new
					c.key := oa.name
					c.val := oa.createCodeHtml(self.name)
					links := links.append(c)
					}
		//Sort by alphabetical order
		if (links.size() != 0) then
			var sorter : SortTree := SortTree.new
			var sortedLinks : Sequence<String> := Sequence<String>.new
				sortedLinks := sorter.sort(links)
				sortedLinks.each{e | contents.append(e)}
		end
		//end list of operations
		contents.append("</TABLE></p>\n")
		
	end
			
	if ownedAttribute.size !=0 then
		contents.append("<HR>")
		contents.append("<FONT SIZE=+2> <B> Details of properties </B></FONT></TH>\n")
		contents.append("<HR>")
	// list of operations detail
		var links : Sequence<Couple> := Sequence<Couple>.new
		ownedAttribute.each{oa |
				var c : Couple := Couple.new
					c.key := oa.name
					c.val := oa.createPropertyDetail()
					links := links.append(c)
				}
		//Sort by alphabetical order
		if (links.size() != 0) then
			var sorter : SortTree := SortTree.new
			var sortedLinks : Sequence<String> := Sequence<String>.new
				sortedLinks := sorter.sort(links)
				sortedLinks.each{e | contents.append(e)}
		end
	end
	
	if ownedOperation.size !=0 then
		contents.append("<HR>")
		contents.append("<FONT SIZE=+2> <B> Details of operations </B></FONT></TH>\n")
		contents.append("<HR>")
	// list of operations detail
		var links : Sequence<Couple> := Sequence<Couple>.new
		ownedOperation.each{oa |
				var c : Couple := Couple.new
					c.key := oa.name
					c.val := oa.createOperationDetail()
					links := links.append(c)
				}
		//Sort by alphabetical order
		if (links.size() != 0) then
			var sorter : SortTree := SortTree.new
			var sortedLinks : Sequence<String> := Sequence<String>.new
				sortedLinks := sorter.sort(links)
				sortedLinks.each{e | contents.append(e)}
		end
	end
	
	contents.append("</body></html>\n")
	FileIO.writeTextFile(path.toURI(), contents.toString)
	result := ""
end
}

aspect class Type {
	operation getTypeDef() : String is do
	
		var s : String init ""
		
		result:= s
	end
	
	operation getname() : String is do
	
	var s : String init ""
	result:=s
	end
	
	operation getClassname() : String is do
	
	var s : String init ""
	result:=s
	end
}

aspect class ParameterizedType{
	operation getTypeDef() : String is do
		var s : String init ""
		
		result:= s
	end
	
	
}

/*aspect class TypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	
}*/

aspect class Class {
	
	operation getTypeDef() : String is do
		
		result := self.typeDefinition.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	operation getClassname() : String is do
	
		result:=self.name
	end
}

/*aspect class ObjectTypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
	
	
}*/

/*aspect class ModelTypeVariable {
	
	operation getName() : String is do
		
		result := self.name
		//stdio.writeln(typeDefinition.toString)		
	end
}*/

aspect class UnresolvedType{
	operation getTypeDef() : String is do
		result := self.typeIdentifier		
	end
}

aspect class Property{
/** create html code of a property **/
	operation createCodeHtml(className : String) : String is do
		
		var typeString : String init ""
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getTypeDef
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(" <a href= " + typeString + ".html target = Content> " + typeString + "  </a>" + " <br>")
		html.append("</CODE></FONT></TD>\n")
		
		
		html.append("<TD><CODE><B><A HREF=" + className +".html#" + self.name +" target = Content>" + self.name + "</a>" + "<br>")
		html.append("<FONT COLOR=RED> attribute</FONT> ")
		if isReadOnly == true then
			html.append("<FONT COLOR=RED>readonly</FONT> ")
		end 
		html.append(self.name + "[" + lower.toString + ".." + upper.toString + "]" + "</A></B></CODE>\n")
		html.append("<br>")
		self.kTag.each{tag | 
			if tag.name == "documentation" then
				html.append("<p>" + tag.~value.replaceAll("\n","<br>") + "</p>\n")
			end
		}
		self.kTag.each{tag | 
			if tag.name != "documentation" then
				html.append("@")
				html.append(tag.name)
				html.append(" \"")
				html.append(tag.~value)
				html.append("\"<BR>\n")
			end
		}
		//html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
/** creat html code for property detail field */
	operation createPropertyDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getTypeDef
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3><br>\n")
		html.append(self.name +"</H3><br>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> "+ self.name + "</B></PRE><br>\n")
		html.append("<ul>")
		html.append("<li>"+typeString + "<B> " + "isReadOnly</B> : " + self.isReadOnly.toString() + "</PRE></li>\n")
		html.append("<li><B> " + "default</B> : " + self.default.toString()+ "</PRE></li>\n")
		html.append("<li><B> " + "isComposite</B> : " + self.isComposite.toString()+ "</PRE></li>\n")
		html.append("<li><B> " + "isDerived</B> : " + self.isDerived.toString()+ "</PRE></li>\n")
		html.append("<li><B> " + "isID</B> : " + self.isID.toString()+ "</PRE></li>\n")
		html.append("<li><B> " + "isGetterAbstract</B> : " + self.isGetterAbstract.toString()+ "</PRE></li>\n")
		html.append("<li><B> " + "isSetterAbstract</B> : " + self.isSetterAbstract.toString()+ "</PRE></li>\n")
		html.append("</ul><HR>")
		result:= html.toString
	end	
}

aspect class Operation {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var typeString : String init ""
	
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getClassname
		end
		
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(" <a href= " + type.getTypeDef + ".html target = Content> " + typeString + "  </a>" + " <br>")
		
		html.append("</CODE></FONT></TD>\n")
		
		html.append("<TD><CODE><B><A HREF=" + className +".html#" + self.name + ">") 
		html.append(self.name)
		
		if self.typeParameter.size !=0 then
		html.append("[") 
		self.typeParameter.indexedEach{e, eachContext | 
										if eachContext.isLast then
											html.append(e.name)
										else
											html.append(e.name + ", ")
										end
										}
		html.append("]")
		end
		
		html.append("(")
		
			
		
		ownedParameter.indexedEach{op,eachIndex | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else  
									paraType := op.type.getTypeDef
								 	if eachIndex.isLast then
								 		html.append(paraType)
								 	else
								 		html.append(paraType + ",")				 	
								  	end
								  end
								 	
								 }
		if html.lastIndexOf(",") !=-1 then
			html.deleteCharAt(html.lastIndexOf(","))
		end
		
		html.append(")</A></B></CODE>\n")
		
		self.kTag.each{tag | 
			// print doc only, other annotations are left for the detailled entry
			if tag.name == "documentation" then
				html.append("<p>"+tag.~value.replaceAll("\n","<br>") + "</p>")
			end
		}	
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 		result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createOperationDetail(): String is do 
		var typeString : String init String.new
		if type.isVoid then typeString :="<Not Set>"
		else
			typeString := type.getClassname
		end
		var html : StringBuffer init StringBuffer.new
		html.append("<A NAME="+ self.name + "><!-- --></A><H3>\n")
		html.append(self.name +"</H3>\n")
		html.append("<PRE>\n")
		html.append(typeString + "<B> ")
		if isAbstract == true then
		html.append("<FONT COLOR = RED> Abstract</FONT> ")
		end
		
		html.append(self.name)
		html.append("[")
		if self.typeParameter.size !=0 then
			self.typeParameter.indexedEach{e, eachContext | 
										if eachContext.isLast then
											html.append(e.name)
										else
											html.append(e.name + ", ")
										end
										}
			html.append("]")
		end
		
		html.append("(")
		
		ownedParameter.indexedEach{op,eachIndex | var paraType : String init String.new
								 if op.type.isVoid then paraType :="<Not Set>"
								 else  
									paraType := op.type.getTypeDef
								 	if eachIndex.isLast then
								 		html.append(paraType)
								 	else
								 		html.append(paraType + ",")				 	
								  	end
								  end
								 	
								 }
		if html.lastIndexOf(",") !=-1 then
			html.deleteCharAt(html.lastIndexOf(","))
		end
	//	invConstraint.each{in | html.append("<FONT COLOR = RED>" + in.stereotype.toString() + " "+ in.name + "</FONT>")}
		
		html.append( ")"+ "</B><BR>\n")
		self.kTag.each{tag | 
			if tag.name == "documentation" then
				html.append("<p>"+tag.~value.replaceAll("\n","</br>") + "</p>\n")
			end
		}
		self.kTag.each{tag | 
			if tag.name != "documentation" then
				html.append("@")
				html.append(tag.name)
				html.append(" \"")
				html.append(tag.~value)
				html.append("\"<BR>\n")
			end
		}
		html.append("</PRE>\n")
		html.append("<HR>")
		result:= html.toString
	end	
}

aspect class Constraint {
	/** create html code of an Operation **/
	operation createCodeHtml(className : String) : String is do
		var html: StringBuffer init StringBuffer.new
		html.append("<TR BGCOLOR=white CLASS=TableRowColor>\n")
 		html.append("<TD ALIGN=right VALIGN=top WIDTH=1%><FONT SIZE=-1>\n")
		html.append("<CODE>\n")
		html.append(self.stereotype.toString())
		html.append("</CODE></FONT></TD>\n")
		html.append("<TD><CODE><B><A HREF=" + className +".html#constraint_detail>" + self.name +"</A></B></CODE>\n")
		html.append("<BR>\n")
		html.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\n")
		html.append("</TR>\n")
 
	result:= html.toString
	end
	
	/** creat html code for Operation detail */
	operation createPeropertyDetail(): String is do 
		var html : StringBuffer init StringBuffer.new
		
		result:= html.toString
	end	
}


/*aspect class ModelType {
	// Create html code 
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
		
		result := html.toString
    end
} */

aspect class PrimitiveType{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    		
    	result:=html.toString
    end
}

aspect class Enumeration{
	/** Create html code */
	operation createHtml (baseFolder:String) : String is do
		var html : StringBuffer init StringBuffer.new	
		html.append(" <a href= " +self.name + ".html target = Content> " + self.name + "  </a>" + " <br>")
    	
    	result:=html.toString
    end
}

aspect class Package{

	/** Create html package page*/
	operation generatePackageHtml (baseFolder : String) : Void is do
		var contents : StringBuffer init StringBuffer.new
		var path : String init baseFolder + "/" + self.getQualifiedName4File() + ".html"
		
		contents.append("<html>")
		contents.append("<head><title>" + self.getQualifiedName() + "</title></head>")
		contents.append("<body>")
		contents.append("<h1>" + self.getQualifiedName() + "</h1><br>")
		contents.append("<p><img src=\"./images/packages/" + self.getQualifiedName4File() +".png\"><p>")
		//contents.append("<img src=\"" + baseFolder + "/" + "images/packages/" + self.getQualifiedName() +".png\"><br>")
		self.kTag.each{tag | 
			if tag.name == "documentation" then
				contents.append("<p>"+tag.~value.replaceAll("\n","</br>") + "</p>\n")
			end
		}
		contents.append("</body></html>")
		
		FileIO.writeTextFile(path.toURI(), contents.toString)
	end
		
	/** Create html code */
	operation createClassesHtml (baseFolder:String, excludePackages : String) : String is do
		var html : StringBuffer init StringBuffer.new	
		
		html.append("<a href=\"" + baseFolder + "/" + self.getQualifiedName() + ".html\" target = Content ><h4>"+self.getQualifiedName()+ "</h4></a>")
		generatePackageHtml(baseFolder)
		
		var classLinks : Sequence<Couple> := Sequence<Couple>.new 
		ownedTypeDefinition.each{otd | 
									var c : Couple := Couple.new
									c.key := otd.name
									c.val := otd.createClassesHtml(baseFolder, excludePackages)
									classLinks := classLinks.append(c)
									otd.generateClassesHtml(baseFolder,self.getQualifiedName())				
								}
								
		//Sort classes links by name
		if(classLinks.size() != 0) then
			var classLinksSorted : Sequence<String>
			var sorter : SortTree := SortTree.new
			classLinksSorted := sorter.sort(classLinks)
			classLinksSorted.each{e | html.append(e)}
		end
		
		
		nestedPackage.each {subPack | 
								if (not excludePackages.contains(subPack.name.trim)) then
									html.append(subPack.createClassesHtml(baseFolder, excludePackages))
								end
								}
		result:=html.toString
    
	end
	
	operation getQualifiedName() : String is do
		var parent : String := ""
		if(not container.isVoid) then
			if(container.isInstanceOf(Package)) then
				parent := container.asType(Package).getQualifiedName() + "::"
			end
		end
		result := parent + name
	end
	
	operation getQualifiedName4File() : String is do
		var parent : String := ""
		if(not container.isVoid) then
			if(container.isInstanceOf(Package)) then
				parent := container.asType(Package).getQualifiedName() + "_"
			end
		end
		result := parent + name
	end
	
	operation generateCodeForMainToc(baseFolder : String, excludePackages : String) : String is do
	var contents : StringBuffer init StringBuffer.new
	
	ownedTypeDefinition.each{otd | 
							contents.append(" <a href= " +otd.name + ".html> " + otd.name + "  </a>" + " <br>\n")
							}
	
	
	nestedPackage.each{pack | 
						if (not excludePackages.contains(pack.name.trim)) then
							
							contents.append(pack.generateCodeForMainToc(baseFolder, excludePackages))
							
						end
						}

	
	
	result:= contents.toString
	end 
	
	operation generateXmlToc(baseFolder : String, excludePackages : String) : String is do
	var contents : StringBuffer init StringBuffer.new
	
	ownedTypeDefinition.each{otd | 
							contents.append("	<topic label=\"" + otd.name +"\" href = \"" + baseFolder + "/" + otd.name + ".html" + "\">\n")
							contents.append("	</topic>\n")
							}
	
	
	nestedPackage.each{pack | 
						if (not excludePackages.contains(pack.name.trim)) then
							contents.append("	<topic label=\"" + pack.name +"\" href = \"" + baseFolder + "/" + pack.name + ".toc.html" + "\">\n")
							contents.append(pack.generateXmlToc(baseFolder, excludePackages))
							contents.append("	</topic>\n")
						end
						}

	
	
	result:= contents.toString
	end 
	
	operation xmlToc(baseFolder : String, excludePackages : String) : Void is do
	var xml : String init "content of pack.name.toc.htlm"
	end

}
}

/*
 * A binary tree used to sort a collection of couples.
 * Couples have a key link to a value and are compared by key.
 * After couples ares sorted we get all values in a Sequence<String> in the same order.
 */
package sortTool{

	class Couple{
		attribute key : String
		attribute val : String
		}

	class SortTree{
		attribute root : SortNode
		
		operation sort(in : Collection<Couple>) : Sequence<String> is do
			self.root := SortNode.new
			in.indexedEach{e, eachContext| 
				if(eachContext.index == 0) then
					root.data := e
				else
					root.insert(e)
				end
				}	
			result := root.getSortedValues()
		end
	}

	class SortNode{
		attribute left : SortNode
		attribute right : SortNode
		attribute data : Couple
		
		operation insert(elem : Couple) : Void is do
			if( elem.key.compareToIgnoreCase(self.data.key) < 0) then
				if(left == void) then
					left := SortNode.new
					left.data := elem
				else
					left.insert(elem)
				end
			else
				if(right == void) then
					right := SortNode.new
					right.data := elem
				else
					right.insert(elem)
				end
			end
		end
		
		operation getSortedValues() : Sequence<String> is do
			var res : Sequence<String> := Sequence<String>.new
			
			if(left != void) then
					left.getSortedValues().each{e | res := res.append(e)}
					end

			res := res.append(self.data.val)
			
			if(right != void) then 
					right.getSortedValues().each{e | res := res.append(e)}
					end
			
			result := res
		end
	}
}