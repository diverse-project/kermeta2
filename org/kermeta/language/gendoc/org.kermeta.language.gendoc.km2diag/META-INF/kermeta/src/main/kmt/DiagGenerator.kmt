using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::emfpersistence::*

using ^org::kermeta::language::structure::*
using GlumlyPackageGenerator::*
using GlumlyClassGenerator::*
using YumlPackageGenerator::*
using YumlClassGenerator::*

package mainPackage{
	class DiagGenerator
	{

		@main ""
		operation createDiag(inputModel : String, outputFolder : String) : Void is do 
			//Param
			//var inputModel : String := "file:/udd/fcoulon/kermetaWS/org.kermeta.language.library.standard/target/beforeCheckingforScopeRESOLVED.km"
			//var outputFolder : String := "/udd/fcoulon/kermetaWS/sortie/"
		
			//Load kermeta model
			var repository : ResourceSet init ResourceSet.new
			var resource : Resource init repository.createResource(inputModel)
			resource.load(void)
			
			// Generate source code
			resource.getContents.each { elem |
				if elem.isInstanceOf(org::kermeta::language::structure::Metamodel) then
				
					//My model
					var mm : Metamodel := elem.asType(org::kermeta::language::structure::Metamodel)
					
					//Create Glumly source code for each package
					var t1 : GlumlyPackageTransform := GlumlyPackageTransform.new
					t1.setOutputfolder(outputFolder + "/img_src/glumly/packages/")
					
					//Creates folders with Glumly sources files for each classes
					var t3 : GlumlyClassTransform := GlumlyClassTransform.new
					t3.setOutputfolder(outputFolder + "/img_src/glumly/classes/")
					
					//Creates Yuml source code for each package
					var t2 : YumlPackageTransform := YumlPackageTransform.new
					t2.setOutputfolder(outputFolder + "/img_src/yuml/packages")
					
					//Creates folders with Yuml sources files for each classes
					var t4 : YumlClassTransform := YumlClassTransform.new
					t4.setOutputfolder(outputFolder + "/img_src/yuml/classes/")
					
					mm.packages.each{pack |
						t1.transform(pack)
						t3.transform(pack)
						t2.transform(pack)
						t4.transform(pack)
						}
					
				end
			}
			
			stdio.writeln("Finish")
			
		end
	}
}