using kermeta::standard::*
using kermeta::io::StdIO => stdio
using ^org::kermeta::language::structure::*
using transform::*

package org::kermeta::language::structure {	
	
	aspect class Package inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitPackage (self)
		end
		
		operation getQualifiedName() : String is do
			var parent : String := ""
			if(not container.isVoid) then
				if(container.isInstanceOf(Package)) then
					parent := container.asType(Package).getQualifiedName() + "::"
				end
			end
			result := parent + name
		end
	}
	
	aspect class TypeDefinition inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitTypeDefinition (self)
		end
	}
	
	aspect class ClassDefinition inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitClassDefinition (self)
		end
	}
	
	aspect class Property inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitProperty (self)
		end
	}
	
	aspect class Type inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitType (self)
		end
		
		operation getClassname() : String is do
			result:= ""		
		end
		
		operation getTypeDef() : String is do
			result := ""	
		end
	}
	
	aspect class Class inherits Abstract_VisitableElement{
		method accept (v: Abstract_PackageVisitor ): Void is do
			v. visitClass (self)
		end
		
		operation getTypeDef() : String is do
			result := self.typeDefinition.name
		end
		
		operation getClassname() : String is do
			result:=self.name
		end
	}	
}


package transform {

	abstract class Abstract_VisitableElement {
	
		operation accept (v: Abstract_PackageVisitor ): Void is abstract
	
	}
	
	abstract class Abstract_Transformation {
	
		operation transform ( input : Abstract_VisitableElement ) : Object is abstract
		
	}
	
	abstract class Abstract_PackageVisitor {
	
		operation visitPackage (p: Package ): Void is abstract
		operation visitTypeDefinition (td: TypeDefinition ): Void is abstract
		operation visitClassDefinition (cd: ClassDefinition ): Void is abstract
		operation visitProperty (p: Property ): Void is abstract
		operation visitType (t: Type ): Void is abstract
		operation visitClass (c: Class ): Void is abstract
		
	}
	
	
}
