using kermeta::standard::*
using kermeta::io::StdIO => stdio
using ^org::kermeta::language::structure::*
using transform::*

package YumlClassGenerator{
	class YumlClassVisitor inherits Abstract_PackageVisitor	{
	
		attribute classContext : Set<String>
		attribute fileContent : StringBuffer
		attribute path : String
		attribute outputFolderUrl : String
	
		operation setOutputfolder(ofp : String) : Void is do
			self.outputFolderUrl := ofp
		end

		operation visitPackage (p: Package ): Void is do
		
			path := p.getQualifiedName().replaceAll("::","/")
			
			p.ownedTypeDefinition.each{ otd | 
					otd.accept(self) 
					}					
			p.nestedPackage.each { subPack | subPack.accept(self) }		
			
		end
	
		operation visitTypeDefinition (td: TypeDefinition ): Void is do
			//Nothing
		end

		operation visitClassDefinition (cd: ClassDefinition ): Void is do
		
			//neighbours classes
			classContext := Set<String>.new
		
			fileContent := StringBuffer.new
			//fileContent.append("[" + cd.name + "{bg:orange}],")
			fileContent.append(printClassDef(cd,true))
		
			/*
			 * First get all links with neighbours
			 */
			
			classContext.add(cd.name)
			 
			//Inheritance
			cd.superType.each{e| 
						if( e.isInstanceOf(org::kermeta::language::structure::Class)) then
							var cl : Class := e.asType(org::kermeta::language::structure::Class) 
							fileContent.append(printClass(cl,false))
						end
						
						fileContent.append("[" + cd.name + "]" + "-^[" + e.getTypeDef() + "],") 
						classContext.add(e.getTypeDef())
					}
					
			//Properties
			cd.ownedAttribute.each{oa |
						if(not isSimpleType( oa.type.getTypeDef() )) then
						
							if( oa.type.isInstanceOf(org::kermeta::language::structure::Class)) then
								var cl : Class := oa.type.asType(org::kermeta::language::structure::Class) 
								fileContent.append(printClass(cl,false))
							end
			
							oa.accept(self)
						end
						}

			/*
			 * Then get all links between neighbours
			 */
			 
			 var visitedElem : Set<String> := Set<String>.new
			 visitedElem.add(cd.name)
			 
			 //Inheritance
			cd.superType.each{e| 
						if( e.isInstanceOf(org::kermeta::language::structure::Class)) then
							var cl : Class := e.asType(org::kermeta::language::structure::Class) 
							visitClass(cl)
							visitedElem.add(cl.name)
						end
					}
					
			//Properties
			cd.ownedAttribute.each{oa |
						if((not isSimpleType( oa.type.getTypeDef() )) and
						 oa.type.isInstanceOf(org::kermeta::language::structure::Class)) then
							var cl : Class := oa.type.asType(org::kermeta::language::structure::Class) 
							//Only once visit for a class
							if(not visitedElem.exists{elemName | elemName.equals(cl.name)}) then
								visitClass(cl)
								visitedElem.add(cl.name)
							end
						end
					}
					
			/*
			 * Store the result
			 */
			kermeta::io::FileIO.writeTextFile((outputFolderUrl+"/"+path+"/"+cd.name+".yuml").toURI(), fileContent.toString())
		end
		
		operation visitProperty (p: Property ): Void is do
			//We want assocation with classes only. Enumeration types for example will not appear.
			if(p.type.isInstanceOf(org::kermeta::language::structure::Class)) then
				
				if(p.isComposite) then
					fileContent.append("[" + p.owningClass.name + "]" + "++-"+p.name+">[" + p.type.getTypeDef() + "],")
				else
					fileContent.append("[" + p.owningClass.name + "]" + "-"+p.name+">[" + p.type.getTypeDef() + "],")
				end
				
				classContext.add(p.type.getTypeDef())
			end			
			
		end
		
		operation isSimpleType (className:String): Boolean is do
		
			result := false
			
			if(className == "Float") then result := true end
			if(className == "Double") then result := true end
			if(className == "Long") then result := true end
			if(className == "Short") then result := true end
			if(className == "Integer") then result := true end
			if(className == "Character") then result := true end
			if(className == "Boolean") then result := true end
			if(className == "String") then result := true end
			if(className == "Void") then result := true end

		end
		
		/*
		 * Get Yuml code of a class with his nested simple type
		 * @c the class drew
		 * @color ask for draw a colored class
		 */
		operation printClassDef(cd:ClassDefinition, color:Boolean):String is do
			var res : StringBuffer := StringBuffer.new
			res.append("[" + cd.name)
			
			//simple type properties
			var simpleTypes : Bag<String> := Bag<String>.new 
			
			cd.ownedAttribute.each{oa |
						if(isSimpleType( oa.type.getTypeDef() )) then
							simpleTypes.add(oa.name+":"+oa.type.getTypeDef())
						end
						}
			if(simpleTypes.size() > 0) then res.append("|") end
			simpleTypes.indexedEach{prop, eachContext| 
						if eachContext.isLast then
							res.append(prop)
						else
							res.append(prop + ";")
						end
						}
			if(color) then res.append("{bg:orange}") end
			res.append("],")
			
			result := res.toString()
		end
		
		operation printClass(cl:Class, color:Boolean):String is do
			var res : StringBuffer := StringBuffer.new
			res.append("[" + cl.name)
			
			//simple type properties
			var simpleTypes : Bag<String> := Bag<String>.new 
			
			cl.ownedAttribute.each{oa |
						if(isSimpleType( oa.type.getTypeDef() )) then
							simpleTypes.add(oa.name+":"+oa.type.getTypeDef())
						end
						}
			if(simpleTypes.size() > 0) then res.append("|") end
			simpleTypes.indexedEach{prop, eachContext| 
						if eachContext.isLast then
							res.append(prop)
						else
							res.append(prop + ";")
						end
						}
			if(color) then res.append("{bg:orange}") end
			res.append("],")
			
			result := res.toString()
		end
		
		operation visitType (t: Type ): Void is do
			//Nothing
		end
		
		/*
		 * Get all links between the Class and the classContext
		 */
		operation visitClass (c: Class ): Void is do
			classContext.each{cc |
					//Inheritance
					c.superClass.each{e| 
								if( e.getTypeDef() == cc) then
									fileContent.append("[" + c.name + "]" + "-^[" + e.getTypeDef() + "],") 
								end
							}
							
					//Properties
					c.ownedAttribute.each{oa |
								if(oa.type.getTypeDef() == cc) then
									if(oa.isComposite) then
										fileContent.append("[" + c.name + "]" + "++->[" + oa.type.getTypeDef() + "],")
									else
										fileContent.append("[" + c.name + "]" + "->[" + oa.type.getTypeDef() + "],")
									end
								end
							}
					}
		end
	}
	
	/*
	 * Entry point
	 */
	class YumlClassTransform inherits Abstract_Transformation{
	
		attribute outputFolderUrl : String
	
		operation setOutputfolder(ofp : String) : Void is do
			self.outputFolderUrl := ofp
		end
	
		operation transform ( input : Abstract_VisitableElement ) : Object is do
			var visitor : YumlClassVisitor := YumlClassVisitor.new
			visitor.setOutputfolder(outputFolderUrl)
			input.accept(visitor)
			result := ""
		
		end
	
	}
}