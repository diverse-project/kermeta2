using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO => FileIO

using kermeta::emfpersistence::*
using ecore_aspectgenerator^ecore::*
using ecore_aspectgenerator::Context
using ecore_aspectgenerator::KmtFileGeneration

package org::kermeta::language::aspectgenerator{
	class AspectGenerator
	{					
		@main ""
	    operation aspectGenerator() : Void is do
	        var ecoreFile		: String init "platform:/resource/org.kermeta.language.aspectgenerator/src/test/fuml.ecore"

	        var userDefined		: OrderedSet[String] init OrderedSet[String].new
	        var newClass		: OrderedSet[String] init OrderedSet[String].new
	        var visitor			: OrderedSet[String] init OrderedSet[String].new
	        var test			: OrderedSet[String] init OrderedSet[String].new
	        
	        userDefined.add("path : Path")
	        userDefined.add("index : Integer")
	      	newClass.add("Path")
	        
	        visitor.add("v : Visitor")
	        
	        stdio.writeln("generation of a compiler project")
	        generateCompilerProject("Compiler", "platform:/resource/org.kermeta.language.aspectgenerator/target/result/result_compile", ecoreFile)
	        
	        stdio.writeln("generation of a interpret project")
	        generateInterpreterProject("Interpreter", "platform:/resource/org.kermeta.language.aspectgenerator/target/result/result_interpret", ecoreFile)
	        
	        stdio.writeln("generation of a visitor pattern project")
	        generateVisitorProject("visit", "platform:/resource/org.kermeta.language.aspectgenerator/target/result/result_patternvisitor", ecoreFile)
	        
	        stdio.writeln("generation of a user defined project")
	        generateUserDefinedProject("userdefined", "platform:/resource/org.kermeta.language.aspectgenerator/target/result/result_userDefined", ecoreFile, "userDefined", "Integer", userDefined, newClass)
	        
	        stdio.writeln("generation of a aspect project")
	        generateAspectProject("aspect", "platform:/resource/org.kermeta.language.aspectgenerator/target/result/result_aspect", ecoreFile)
	        
	    end
	        
		operation loadEcoreModel(ecoreFile : String) : Collection[EPackage] is do             
			var repository : ResourceSet init ResourceSet.new
			var resource : Resource init repository.createResource(ecoreFile, "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore")
			
			resource.load(void)      
			result := OrderedSet[EPackage].new
			resource.getContents.each{next |
				if (next.isInstanceOf(EPackage)) then                 
					result.add(next.asType(EPackage))
				end
			}			
		end
		
		operation generateCompilerProject (nameProject : String, folderLocation : String, ecoreFile : String) : Void is do
			var inputPackages	: Collection[EPackage] init loadEcoreModel(ecoreFile)
	        var context 		: Context := Context.new
	        var kmtFile 		: KmtFileGeneration init KmtFileGeneration.new.initialize(context)
		
		
			var operationParams	: OrderedSet[String] init OrderedSet[String].new
			operationParams.add("context : Context")
			
			//compile
	        context.initialize("compiler", nameProject, folderLocation, "compile", "Void", operationParams)
	        inputPackages.each{p | p.generateAspect(context)}
	        kmtFile.writeNewClass("Context")
		end
		
		operation generateInterpreterProject (nameProject : String, folderLocation : String, ecoreFile : String) : Void is do
			var inputPackages	: Collection[EPackage] init loadEcoreModel(ecoreFile)
	        var context 		: Context := Context.new
	        
			//useless
			var operationParams	: OrderedSet[String] init OrderedSet[String].new
			
			//interpret
	        context.initialize("interpreter", nameProject, folderLocation, "interpret", "Void", operationParams)
	        inputPackages.each{p | p.generateAspect(context)}		
		end
		
		operation generateUserDefinedProject (nameProject : String, folderLocation : String, ecoreFile : String, operationName : String, operationReturnType : String, operationParams : OrderedSet[String], listNewClass : OrderedSet[String]) : Void is do
			var inputPackages	: Collection[EPackage] init loadEcoreModel(ecoreFile)
	        var context 		: Context := Context.new
	        
	        //userDefined
	        context.initialize("userDefined", nameProject, folderLocation, operationName,operationReturnType, operationParams)
	        inputPackages.each{p | p.generateAspect(context)}
		end
		
		operation generateVisitorProject (nameProject : String, folderLocation : String, ecoreFile : String) : Void is do
			var inputPackages	: Collection[EPackage] init loadEcoreModel(ecoreFile)
	        var context 		: Context := Context.new
	        var kmtFile 		: KmtFileGeneration init KmtFileGeneration.new.initialize(context)
	        var visitor			: OrderedSet[String] init OrderedSet[String].new
	        visitor.add("v : Visitor")
	        
			//visitor pattern
	        context.initialize("visitor", nameProject, folderLocation, "accept", "Void", visitor)
	        inputPackages.each{p | p.generateAspect(context)}
	        kmtFile.writeVisitorPattern
		end
		
		operation generateAspectProject (nameProject : String, folderLocation : String, ecoreFile : String) : Void is do
			var inputPackages	: Collection[EPackage] init loadEcoreModel(ecoreFile)
	        var context 		: Context := Context.new
	        
			//useless
			var operationParams	: OrderedSet[String] init OrderedSet[String].new
	        
			//aspect
	        context.initialize("", nameProject, folderLocation, "", "", operationParams)
	        inputPackages.each{p | p.generateAspect(context)}	
		end
	}
}
