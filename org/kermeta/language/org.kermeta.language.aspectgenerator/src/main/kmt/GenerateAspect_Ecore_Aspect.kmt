using kermeta::standard::*
using org::kermeta::language::aspectgenerator::Context
using org::kermeta::language::aspectgenerator::KmtFileGeneration

package ecore{
	aspect class EPackage
	{
	
		operation generateAspect(context : Context) : Void is do
			var iCounter 	: Integer 	init 1
			var kmtFile 	: KmtFileGeneration
			
			kmtFile := KmtFileGeneration.new.initialize(context)
			
			addPackage (context)
			
			// Processing on the subpackages if it exists there
			self.eSubpackages.each{ p | p.generateAspect(context)}
			
			// Processing on the class of the package if it exists there
			if(self.eClassifiers.exists{c | c.isInstanceOf(EClass)}) then
				context.packageCollection.each { pc |
					context.kmtContent.append(context.counterTab(iCounter) + "package " + pc + " {\n\n")
					iCounter := iCounter + 1}
				self.eClassifiers.each{ c | 
					if (c.isInstanceOf(EClass)) then
						c.asType(EClass).generateAspect(context)
					end}
				kmtFile.writeKmtFile
				context.kmtContent := StringBuffer.new
			end
			
			deletePackage (context)
		end
		
		operation addPackage (context : Context) : Void is do
			context.counterPackage := context.counterPackage + 1
			context.packageCollection.add(self.name)
		end
		
		operation deletePackage (context : Context) : Void is do
			context.packageCollection.removeAt(context.counterPackage - 1)
			if (context.counterPackage > 0) then
				context.counterPackage := context.counterPackage - 1
			end
		end
	}
	
	aspect class EClass
	{
		
		method generateAspect(context : Context) : Void is do
			
			writeOpenClass (context)
			writeCloseClass (context)
			
		end
		
		operation writeOpenClass (context : Context) : Void is do
			var scriptNewClass : String init ""
			
			addClass (context)
			
			scriptNewClass := scriptNewClass + context.counterTab(context.counterPackage + 1)
			if (self.~abstract) then
				scriptNewClass := scriptNewClass + "aspect abstract class "
			else
				scriptNewClass := scriptNewClass + "aspect class "
			end
						
			scriptNewClass := scriptNewClass + self.name
			
			if (context.typeProject == "visitor") then
				scriptNewClass := scriptNewClass + " inherits VisitableElement"
			end
			
			scriptNewClass := scriptNewClass + " {\n"
			
			context.kmtContent.append(scriptNewClass)
		end
		
		operation writeCloseClass (context : Context) : Void is do
			context.kmtContent.append(writeOperation (context) + "\n" + context.counterTab(context.counterPackage + 1) + "}\n\n")
		end
		
		operation writeOperation (context : Context) : String is do
			result := ""
			if(not context.operationName.isVoid) then
				result := result + "\n" + context.counterTab(context.counterPackage + 2)
				if (context.typeProject == "visitor") then
					result := result + "method " + context.operationName + writeParamatersOperation (context)
					result := result + context.counterTab(context.counterPackage + 3) + "v.visit" + self.name + "(self)\n"
				else
					result := result + "operation " + context.operationName + writeParamatersOperation (context)
					result := result + context.counterTab(context.counterPackage + 3) + "result := void\n"
				end
				result := result + context.counterTab(context.counterPackage + 2) + "end\n"
			end
		end
		
		operation writeParamatersOperation (context : Context) : String is do
			result := " ("
			if (context.operationParams.isNotEmpty) then
				context.operationParams.each{op |
					result := result + op
					if (context.operationParams.indexOf(op) < context.operationParams.size - 1) then 
						result := result + ", "
					end}
			end
			result := result + ") : "
			if (context.operationReturnType != void) then
				result := result + context.operationReturnType
			else
				result := result + "Void"
			end
			result := result + " is do\n"
		end
		
		operation addClass (context : Context) : Void is do
			context.classCollection.add(self.name)
		end
	}
}
