using ^kermeta::standard::*
using ^org::kermeta::language::structure::*
using ^kermeta::exceptions::*



package kermeta{
package io{



/* *************************************************
 * Franck FLEUREY - 01/03/2007
 * Triskell Research Group
 * IRISA / University of Rennes 1 (France)
 * Distributed under the terms of the EPL licence
 *
 * Implementation of Kermeta File Helper.
 *************************************************** */
 
/**
 * Implementation of simple helpers to read ans write text files
 * <img src="platform:/plugin/org.kermeta.documentation/src/figures/io_package.png"/>
 */
@CompilerIgnore "true"
@ScalaCompilerName "k2.io.FileIO"
singleton FileIO
{
	/**
	 * Writes a String in a text file
	 */ 
	operation writeTextFile(fileURI : URI, text : String) : Void is do

	end
	
	/**
	 * Writes a String in a text file by using a specific encoding
	 */ 
	operation writeTextFileWithEncoding(fileURI : URI, text : String, encoding : String) : Void is do

	end
	
	/**
	 * Reads a text file
	 */ 
	operation readTextFile(fileURI : URI) : String is do
	
	end
	
	/** 
	 * Return the URI of the user current directory
	 */
	operation getCurrentDir() : URI is do
	end

}


@CompilerIgnore "true"
@ScalaCompilerName "k2.io.StdIO"
singleton StdIO
{
	/**
	 * Writes the object to standard output
	 */ 
	operation write(object : String) : Void is do

	end
	
	/**
	 * Writeln the object to error output
	 *
	 * Convenient operation for log(Kind.UserINFO,object,"")
	 */ 
	operation errorln(object : String) : Void is do

	end
	
	/**
	 * Writes the object to error output
	 */ 
	operation error(object : String) : Void is do

	end
	
	/**
	 * Writeln the object to standard output.
	 *
	 * Convenient operation for log(Kind.UserERROR,object,"")
	 */ 
	operation writeln(object : String) : Void is do

	end
	
	/**
	 * Reads a String from standard input
	 */ 
	operation read(prompt : String) : String is do

	end
	
	/**
	 * Log a message to the output
	 *
	 * @kind The level of logging.
	 * @message Text printed.
	 * @messageGroup Destination. Default console is ""
	 */
	operation log(kind : Integer, message : String, messageGroup : String) : Void is do
	end
	
	/*
	 * Start and print a progress
	 * 
	 * @progressGroup Name of the progress
	 * @message Text printed
	 * @messageGroup Destination
	 * @nbWorkingUnit Size of the progress
	 */
	operation initProgress(progressGroup : String, message : String, messageGroup : String, nbWorkUnit : Integer) : Void is do
	end
	
	/**
	 * Print step of a progress is done
	 *
	 * @progressGroup Name of the progress
	 * @message Text printed
	 * @messageGroup Destination
	 * @workedUnit Progression
	 */
	operation progress(progressGroup : String, message : String, messageGroup : String, workedUnit : Integer) : Void is do
	end
	
	/**
	 * End a progress
	 *
	 * @progressGroup Name of the progress
	 * @message Text printed
	 * @messageGroup Destination
	 */
	operation doneProgress(progressGroup : String, message : String, messageGroup : String) : Void is do
	end
	
	/**
	 * Clean the console.
	 */
	operation clearLog() is do
	end
	
}

/**
 * Level of logging
 */
singleton Kind { 

	operation UserINFO() : Integer is do
		result := 1
	end

	operation UserWARNING() : Integer is do
		result := 2
	end

	operation UserERROR() : Integer is do
		result := 3
	end

	operation DevDEBUG() : Integer is do
		result := 4
	end

	operation DevINFO() : Integer is do
		result := 5
	end

	operation DevWARNING() : Integer is do
		result := 6
	end

	operation DevERROR() : Integer is do
		result := 7
	end
}


}
}

